{"version":3,"sources":["../../src/optimize/create-inlining-visitor.js"],"names":["inlining","props","Attribute","exit","node","identifiers","value","MagicString","propsToChange","filter","prop","name","propsToNotChange","forEach","propIDs","propValue","canMakeText","Object","keys","length","start","end","propID","isText","expression","content","String","overwrite","toString","InterpolationEscaped","parent","position","children","findIndex","child","slice","type","textName","Iteration","propToInline","find","iterable","Condition","enter","test","newValue"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAO;AACLC,eAAW;AACTC,WAAKC,IAAL,EAAW;AACT,YAAI,CAACA,KAAKC,WAAV,EAAuB;AACrB;AACD;AACD,cAAMC,QAAQ,IAAIC,qBAAJ,CAAgBH,KAAKE,KAArB,CAAd;AACA,cAAME,gBAAgBP,MAAMQ,MAAN,CAAaC,QAAQA,KAAKJ,KAAL,IAAcF,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAAnC,CAAtB;AACA,cAAMC,mBAAmBX,MAAMQ,MAAN,CAAaC,QAAQ,CAACA,KAAKJ,KAAN,IAAeF,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAApC,CAAzB;AACAC,yBAAiBC,OAAjB,CAAyBH,QAAQ,6BAAcN,IAAd,EAAoBM,IAApB,EAA0BJ,KAA1B,CAAjC;AACAE,sBAAcK,OAAd,CAAsBH,QAAQ;AAC5B,gBAAMI,UAAUV,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAAhB;AACA,gBAAMI,YAAYL,KAAKJ,KAAL,CAAWA,KAA7B;AACA,gBAAMU,cACJC,OAAOC,IAAP,CAAYd,KAAKC,WAAjB,EAA8Bc,MAA9B,KAAyC,CAAzC,IACAL,QAAQK,MAAR,KAAmB,CADnB,IAEAL,QAAQ,CAAR,EAAWM,KAAX,KAAqB,CAFrB,IAGAN,QAAQ,CAAR,EAAWO,GAAX,KAAmBjB,KAAKE,KAAL,CAAWa,MAJhC;AAKAL,kBAAQD,OAAR,CAAgBS,UAAU;AACxB,kBAAMC,SAASb,KAAKJ,KAAL,CAAWkB,UAAX,KAA0B,KAAzC;AACA,kBAAMC,UAAU,CAACT,WAAD,IAAgBO,MAAhB,GAA0B,IAAGG,OAAOX,SAAP,CAAkB,GAA/C,GAAoDW,OAAOX,SAAP,CAApE;AACAT,kBAAMqB,SAAN,CAAgBL,OAAOF,KAAvB,EAA8BE,OAAOD,GAArC,EAA0CI,OAA1C;AACA,gBAAIT,eAAeO,MAAnB,EAA2B;AACzB;AACAnB,mBAAKoB,UAAL,GAAkB,KAAlB;AACD;AACF,WARD;AASD,SAjBD;AAkBApB,aAAKE,KAAL,GAAaA,MAAMsB,QAAN,EAAb;AACD;AA5BQ,KADN;AA+BLC,0BAAsB;AACpB1B,WAAKC,IAAL,EAAW0B,MAAX,EAAmB;AACjB,cAAMxB,QAAQ,IAAIC,qBAAJ,CAAgBH,KAAKE,KAArB,CAAd;AACA,cAAME,gBAAgBP,MAAMQ,MAAN,CAAaC,QAAQA,KAAKJ,KAAL,IAAcF,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAAnC,CAAtB;AACA,cAAMC,mBAAmBX,MAAMQ,MAAN,CAAaC,QAAQ,CAACA,KAAKJ,KAAN,IAAeF,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAApC,CAAzB;AACAC,yBAAiBC,OAAjB,CAAyBH,QAAQ,6BAAcN,IAAd,EAAoBM,IAApB,EAA0BJ,KAA1B,CAAjC;AACAE,sBAAcK,OAAd,CAAsBH,QAAQ;AAC5B,cAAIA,KAAKC,IAAL,KAAc,UAAlB,EAA8B;AAC5B,kBAAMoB,WAAWD,OAAOE,QAAP,CAAgBC,SAAhB,CAA0BC,SAASA,MAAM5B,KAAN,KAAgB,UAAnD,CAAjB;AACAwB,mBAAOE,QAAP,GAAkB,CAChB,GAAGF,OAAOE,QAAP,CAAgBG,KAAhB,CAAsB,CAAtB,EAAyBJ,QAAzB,CADa,EAEhB,GAAGrB,KAAKJ,KAFQ,EAGhB,GAAGwB,OAAOE,QAAP,CAAgBG,KAAhB,CAAsBJ,WAAW,CAAjC,CAHa,CAAlB;AAKA;AACD;AACD,gBAAMjB,UAAUV,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAAhB;AACA,gBAAMI,YAAYL,KAAKJ,KAAL,CAAWA,KAA7B;AACA,gBAAMU,cACJC,OAAOC,IAAP,CAAYd,KAAKC,WAAjB,EAA8Bc,MAA9B,KAAyC,CAAzC,IACAL,QAAQK,MAAR,KAAmB,CADnB,IAEAL,QAAQ,CAAR,EAAWM,KAAX,KAAqB,CAFrB,IAGAN,QAAQ,CAAR,EAAWO,GAAX,KAAmBjB,KAAKE,KAAL,CAAWa,MAJhC;AAKAL,kBAAQD,OAAR,CAAgBS,UAAU;AACxB,kBAAMC,SAASb,KAAKJ,KAAL,CAAWkB,UAAX,KAA0B,KAAzC;AACA,kBAAMC,UAAU,CAACT,WAAD,IAAgBO,MAAhB,GAA0B,IAAGG,OAAOX,SAAP,CAAkB,GAA/C,GAAoDW,OAAOX,SAAP,CAApE;AACAT,kBAAMqB,SAAN,CAAgBL,OAAOF,KAAvB,EAA8BE,OAAOD,GAArC,EAA0CI,OAA1C;AACA,gBAAIT,eAAeO,MAAnB,EAA2B;AACzB;AACAnB,mBAAKgC,IAAL,GAAYC,aAAZ;AACA,qBAAOjC,KAAKC,WAAZ;AACD;AACF,WATD;AAUAD,eAAKE,KAAL,GAAaA,MAAMsB,QAAN,EAAb;AACD,SA5BD;AA6BD;AAnCmB,KA/BjB;AAoELU,eAAW;AACTnC,WAAKC,IAAL,EAAW;AACT,cAAMmC,eAAetC,MAAMuC,IAAN,CAAW9B,QAAQA,KAAKC,IAAL,KAAcP,KAAKqC,QAAtC,CAArB;AACA,YAAIF,gBAAgBA,aAAajC,KAA7B,IAAsCiC,aAAajC,KAAb,CAAmBkB,UAA7D,EAAyE;AACvEpB,eAAKqC,QAAL,GAAgBF,aAAajC,KAAb,CAAmBA,KAAnC;AACD;AACF;AANQ,KApEN;AA4ELoC,eAAW;AACTC,YAAMvC,IAAN,EAAY;AACV,cAAMwC,OAAO,IAAIrC,qBAAJ,CAAgBH,KAAKwC,IAArB,CAAb;AACA,cAAMpC,gBAAgBP,MAAMQ,MAAN,CAAaC,QAAQA,KAAKJ,KAAL,IAAcF,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAAnC,CAAtB;AACA,cAAMC,mBAAmBX,MAAMQ,MAAN,CAAaC,QAAQ,CAACA,KAAKJ,KAAN,IAAeF,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAApC,CAAzB;AACAC,yBAAiBC,OAAjB,CAAyBH,QAAQ,6BAAcN,IAAd,EAAoBM,IAApB,EAA0BkC,IAA1B,EAAgC,MAAhC,CAAjC;AACApC,sBAAcK,OAAd,CAAsBH,QAAQ;AAC5B,gBAAMI,UAAUV,KAAKC,WAAL,CAAiBK,KAAKC,IAAtB,CAAhB;AACA,gBAAMI,YAAYL,KAAKJ,KAAL,CAAWA,KAA7B;AACAQ,kBAAQD,OAAR,CAAgBS,UAAU;AACxB,kBAAMuB,WAAWnC,KAAKJ,KAAL,CAAWkB,UAAX,KAA0B,KAA1B,GAAmC,IAAGT,SAAU,GAAhD,GAAqDW,OAAOX,SAAP,CAAtE;AACA6B,iBAAKjB,SAAL,CAAeL,OAAOF,KAAtB,EAA6BE,OAAOD,GAApC,EAAyCwB,QAAzC;AACD,WAHD;AAIAzC,eAAKwC,IAAL,GAAYA,KAAKhB,QAAL,EAAZ;AACD,SARD;AASD;AAfQ;AA5EN,GAAP;AA8FD,C,CApGD;kBAsGe5B,Q","file":"create-inlining-visitor.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport MagicString from 'magic-string';\nimport makeUndefined from './make-undefined';\nimport { textName } from '../ast';\n\nfunction inlining(props) {\n  return {\n    Attribute: {\n      exit(node) {\n        if (!node.identifiers) {\n          return;\n        }\n        const value = new MagicString(node.value);\n        const propsToChange = props.filter(prop => prop.value && node.identifiers[prop.name]);\n        const propsToNotChange = props.filter(prop => !prop.value && node.identifiers[prop.name]);\n        propsToNotChange.forEach(prop => makeUndefined(node, prop, value));\n        propsToChange.forEach(prop => {\n          const propIDs = node.identifiers[prop.name];\n          const propValue = prop.value.value;\n          const canMakeText =\n            Object.keys(node.identifiers).length === 1 &&\n            propIDs.length === 1 &&\n            propIDs[0].start === 0 &&\n            propIDs[0].end === node.value.length;\n          propIDs.forEach(propID => {\n            const isText = prop.value.expression === false;\n            const content = !canMakeText && isText ? `'${String(propValue)}'` : String(propValue);\n            value.overwrite(propID.start, propID.end, content);\n            if (canMakeText && isText) {\n              // Make attr text;\n              node.expression = false;\n            }\n          });\n        });\n        node.value = value.toString();\n      }\n    },\n    InterpolationEscaped: {\n      exit(node, parent) {\n        const value = new MagicString(node.value);\n        const propsToChange = props.filter(prop => prop.value && node.identifiers[prop.name]);\n        const propsToNotChange = props.filter(prop => !prop.value && node.identifiers[prop.name]);\n        propsToNotChange.forEach(prop => makeUndefined(node, prop, value));\n        propsToChange.forEach(prop => {\n          if (prop.name === 'children') {\n            const position = parent.children.findIndex(child => child.value === 'children');\n            parent.children = [\n              ...parent.children.slice(0, position),\n              ...prop.value,\n              ...parent.children.slice(position + 1)\n            ];\n            return;\n          }\n          const propIDs = node.identifiers[prop.name];\n          const propValue = prop.value.value;\n          const canMakeText =\n            Object.keys(node.identifiers).length === 1 &&\n            propIDs.length === 1 &&\n            propIDs[0].start === 0 &&\n            propIDs[0].end === node.value.length;\n          propIDs.forEach(propID => {\n            const isText = prop.value.expression === false;\n            const content = !canMakeText && isText ? `'${String(propValue)}'` : String(propValue);\n            value.overwrite(propID.start, propID.end, content);\n            if (canMakeText && isText) {\n              // Convert to Text.\n              node.type = textName;\n              delete node.identifiers;\n            }\n          });\n          node.value = value.toString();\n        });\n      }\n    },\n    Iteration: {\n      exit(node) {\n        const propToInline = props.find(prop => prop.name === node.iterable);\n        if (propToInline && propToInline.value && propToInline.value.expression) {\n          node.iterable = propToInline.value.value;\n        }\n      }\n    },\n    Condition: {\n      enter(node) {\n        const test = new MagicString(node.test);\n        const propsToChange = props.filter(prop => prop.value && node.identifiers[prop.name]);\n        const propsToNotChange = props.filter(prop => !prop.value && node.identifiers[prop.name]);\n        propsToNotChange.forEach(prop => makeUndefined(node, prop, test, 'test'));\n        propsToChange.forEach(prop => {\n          const propIDs = node.identifiers[prop.name];\n          const propValue = prop.value.value;\n          propIDs.forEach(propID => {\n            const newValue = prop.value.expression === false ? `'${propValue}'` : String(propValue);\n            test.overwrite(propID.start, propID.end, newValue);\n          });\n          node.test = test.toString();\n        });\n      }\n    }\n  };\n}\n\nexport default inlining;\n"]}