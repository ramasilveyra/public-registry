{"version":3,"sources":["../../src/optimize/create-inlining-visitor.js"],"names":["t","createInliningVisitor","props","Attribute","enter","node","parent","inlineNodeVisitor","InterpolationEscaped","Iteration","Condition","key","clonePath","isIdentifier","isMemberExpression","inline","traverse","Identifier","path","isObjectKey","isObjectProperty","iteration","findParent","n","type","iterationName","matchedProp","find","prop","name","definition","currentValuePath","indexPath","arrayPath","value","defaultPath","replaceWith","resolved","isBoolean","BooleanLiteral","isString","stringLiteral","isNode","isInterpolationEscapedId","consequent","valueNode","booleanLiteral","wasInserted","insertChildren","matchedPropNode","valuePath","condition","target","_parent","code","ast","newPath","Program","get","isExpressionStatement","identifierName","position","children","findIndex","child","slice","Array","isArray","interpolationEscapedName"],"mappings":"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","file":"create-inlining-visitor.js","sourcesContent":["/* eslint-disable no-param-reassign, no-underscore-dangle */\nimport * as t from '@babel/types';\nimport babelTraverse from '@babel/traverse';\nimport babelGenerator from '@babel/generator';\nimport { iterationName, interpolationEscapedName } from '../ast';\nimport parser from '../parser';\n\nfunction createInliningVisitor(props) {\n  return {\n    Attribute: {\n      enter(node, parent) {\n        inlineNodeVisitor(node, parent, props, 'valuePath');\n      }\n    },\n    InterpolationEscaped: {\n      enter(node, parent) {\n        inlineNodeVisitor(node, parent, props, 'valuePath');\n      }\n    },\n    Iteration: {\n      enter(node, parent) {\n        inlineNodeVisitor(node, parent, props, 'iterablePath');\n      }\n    },\n    Condition: {\n      enter(node, parent) {\n        inlineNodeVisitor(node, parent, props, 'testPath');\n      }\n    }\n  };\n}\n\nexport default createInliningVisitor;\n\nfunction inlineNodeVisitor(node, parent, props, key) {\n  if (!node[key]) {\n    return;\n  }\n  node[key] = clonePath(node[key].node);\n  if (t.isIdentifier(node[key].node) && !t.isMemberExpression(node[key].parent)) {\n    inline(props, node[key], parent, node);\n    return;\n  }\n  node[key].traverse({\n    Identifier(path) {\n      const isObjectKey = t.isObjectProperty(path.parent) && path.parent.key === path.node;\n      if (t.isMemberExpression(path.parent) || isObjectKey) {\n        return;\n      }\n      inline(props, path, parent, node);\n    }\n  });\n}\n\nfunction inline(props, path, parent, node) {\n  const iteration = findParent(parent, n => n.type === iterationName);\n  const matchedProp = props.find(prop => prop.name === path.node.name);\n  const definition = matchedProp && matchedProp.definition;\n  if (\n    iteration &&\n    (iteration.currentValuePath.node.name === path.node.name ||\n      (iteration.indexPath && iteration.indexPath.node.name === path.node.name) ||\n      (iteration.arrayPath && iteration.arrayPath.node.name === path.node.name))\n  ) {\n    return;\n  }\n  if (!matchedProp || !matchedProp.value) {\n    if (definition && definition.defaultPath) {\n      path.replaceWith(definition.defaultPath.node);\n      return;\n    }\n    if (!node.resolved) {\n      path.node.name = 'undefined';\n    }\n    return;\n  }\n  if (matchedProp.value.isBoolean) {\n    path.replaceWith(t.BooleanLiteral(true));\n    return;\n  }\n  if (matchedProp.value.isString) {\n    path.replaceWith(t.stringLiteral(matchedProp.value.value));\n    return;\n  }\n  if (matchedProp.value.isNode) {\n    if (isInterpolationEscapedId(matchedProp.name, node.consequent)) {\n      node.consequent = matchedProp.value.valueNode;\n      path.replaceWith(t.booleanLiteral(true));\n      return;\n    }\n    const wasInserted = insertChildren(parent, matchedProp.name, matchedProp.value.valueNode);\n    if (wasInserted) {\n      return;\n    }\n    path.replaceWith(t.booleanLiteral(true));\n    return;\n  }\n  if (matchedProp.name === 'children') {\n    insertChildren(parent, 'children', matchedProp.value);\n    return;\n  }\n  const matchedPropNode = matchedProp.value.valuePath.node;\n  if (t.isIdentifier(matchedPropNode)) {\n    path.node.name = matchedPropNode.name;\n    node.resolved = true;\n    return;\n  }\n  path.replaceWith(matchedPropNode);\n  node.resolved = true;\n}\n\nfunction findParent(node, condition) {\n  let target = node;\n  while (target._parent) {\n    if (condition(target)) {\n      return target;\n    }\n    target = target._parent;\n  }\n  return null;\n}\n\nfunction clonePath(node) {\n  const code = babelGenerator(node).code;\n  const ast = parser(code);\n  let newPath = null;\n  babelTraverse(\n    ast,\n    {\n      Program(path) {\n        newPath = path.get('body.0');\n        if (t.isExpressionStatement(newPath.node)) {\n          newPath = newPath.get('expression');\n        }\n      }\n    },\n    null\n  );\n  return newPath;\n}\n\nfunction insertChildren(parent, identifierName, node) {\n  const position = parent.children.findIndex(child =>\n    isInterpolationEscapedId(identifierName, child)\n  );\n  if (position === -1) {\n    return false;\n  }\n  parent.children = [\n    ...parent.children.slice(0, position),\n    ...(Array.isArray(node) ? node : [node]),\n    ...parent.children.slice(position + 1)\n  ];\n  return true;\n}\n\nfunction isInterpolationEscapedId(identifierName, child) {\n  if (child && child.type === interpolationEscapedName && child.valuePath) {\n    return t.isIdentifier(child.valuePath.node, { name: identifierName });\n  }\n  return false;\n}\n"]}