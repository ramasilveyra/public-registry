{"version":3,"sources":["../../src/optimize/set-is-required-flag-visitor.js"],"names":["setRequiredFlagVisitor","t","definitions","Attribute","exit","node","path","valuePath","flagNode","isMemberExpression","isCallExpression","firstMemberExpression","getFirstMemberExpression","nodeBabel","nodeUnreact","isIdentifier","defFound","find","def","name","isRequired","object","callee"],"mappings":";;;;;kBAGwBA,sB;;AAFxB;;IAAYC,C;;;;AAEG,SAASD,sBAAT,CAAgCE,WAAhC,EAA6C;AAC1D,MAAI,CAACA,WAAL,EAAkB;AAChB,WAAO,EAAP;AACD;AACD,SAAO;AACLC,eAAW;AACTC,WAAKC,IAAL,EAAW;AACT,cAAMC,OAAOD,KAAKE,SAAlB;AACA,YAAI,CAACD,IAAL,EAAW;AACT;AACD;AACDE,iBAASN,WAAT,EAAsBI,KAAKD,IAA3B,EAAiCA,IAAjC;AACA,YAAIJ,EAAEQ,kBAAF,CAAqBH,KAAKD,IAA1B,KAAmCJ,EAAES,gBAAF,CAAmBJ,KAAKD,IAAxB,CAAvC,EAAsE;AACpE,gBAAMM,wBAAwBC,yBAAyBN,KAAKD,IAA9B,CAA9B;AACAG,mBAASN,WAAT,EAAsBS,qBAAtB,EAA6CN,IAA7C;AACD;AACF;AAXQ;AADN,GAAP;AAeD,C,CAtBD;;AAuBA,SAASG,QAAT,CAAkBN,WAAlB,EAA+BW,SAA/B,EAA0CC,WAA1C,EAAuD;AACrD,MAAI,CAACb,EAAEc,YAAF,CAAeF,SAAf,CAAL,EAAgC;AAC9B;AACD;AACD,QAAMG,WAAWd,YAAYe,IAAZ,CAAiBC,OAAOA,IAAIC,IAAJ,KAAaN,UAAUM,IAA/C,CAAjB;AACA,MAAIH,YAAYA,SAASI,UAAzB,EAAqC;AACnCN,gBAAYM,UAAZ,GAAyB,IAAzB;AACD;AACF;;AAED,SAASR,wBAAT,CAAkCP,IAAlC,EAAwC;AACtC,MAAIM,wBAAwBN,IAA5B;AACA,SAAOJ,EAAEQ,kBAAF,CAAqBE,qBAArB,KAA+CV,EAAES,gBAAF,CAAmBC,qBAAnB,CAAtD,EAAiG;AAC/FA,4BAAwBA,sBAAsBU,MAAtB,IAAgCV,sBAAsBW,MAA9E;AACD;AACD,SAAOX,qBAAP;AACD","file":"set-is-required-flag-visitor.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport * as t from '@babel/types';\n\nexport default function setRequiredFlagVisitor(definitions) {\n  if (!definitions) {\n    return {};\n  }\n  return {\n    Attribute: {\n      exit(node) {\n        const path = node.valuePath;\n        if (!path) {\n          return;\n        }\n        flagNode(definitions, path.node, node);\n        if (t.isMemberExpression(path.node) || t.isCallExpression(path.node)) {\n          const firstMemberExpression = getFirstMemberExpression(path.node);\n          flagNode(definitions, firstMemberExpression, node);\n        }\n      }\n    }\n  };\n}\nfunction flagNode(definitions, nodeBabel, nodeUnreact) {\n  if (!t.isIdentifier(nodeBabel)) {\n    return;\n  }\n  const defFound = definitions.find(def => def.name === nodeBabel.name);\n  if (defFound && defFound.isRequired) {\n    nodeUnreact.isRequired = true;\n  }\n}\n\nfunction getFirstMemberExpression(node) {\n  let firstMemberExpression = node;\n  while (t.isMemberExpression(firstMemberExpression) || t.isCallExpression(firstMemberExpression)) {\n    firstMemberExpression = firstMemberExpression.object || firstMemberExpression.callee;\n  }\n  return firstMemberExpression;\n}\n"]}