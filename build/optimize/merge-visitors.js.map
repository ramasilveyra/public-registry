{"version":3,"sources":["../../src/optimize/merge-visitors.js"],"names":["mergeVisitors","visitors","newVisitorData","reduce","v","visitor","Object","keys","forEach","nodeKey","enter","exit","push","newVisitor","node","parent","visitorNode"],"mappings":";;;;;AAAA;AACA,SAASA,aAAT,CAAuB,GAAGC,QAA1B,EAAoC;AAClC;AACA,QAAMC,iBAAiBD,SAASE,MAAT,CAAgB,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AACrDC,WAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6BC,WAAW;AACtC,UAAI,CAACL,EAAEK,OAAF,CAAL,EAAiB;AACfL,UAAEK,OAAF,IAAa;AACXC,iBAAO,EADI;AAEXC,gBAAM;AAFK,SAAb;AAID;AACD,UAAIN,QAAQI,OAAR,EAAiBC,KAArB,EAA4B;AAC1BN,UAAEK,OAAF,EAAWC,KAAX,CAAiBE,IAAjB,CAAsBP,QAAQI,OAAR,EAAiBC,KAAvC;AACD;AACD,UAAIL,QAAQI,OAAR,EAAiBE,IAArB,EAA2B;AACzBP,UAAEK,OAAF,EAAWE,IAAX,CAAgBC,IAAhB,CAAqBP,QAAQI,OAAR,EAAiBE,IAAtC;AACD;AACF,KAbD;AAcA,WAAOP,CAAP;AACD,GAhBsB,EAgBpB,EAhBoB,CAAvB;AAiBA;AACA,QAAMS,aAAaP,OAAOC,IAAP,CAAYL,cAAZ,EAA4BC,MAA5B,CAAmC,CAACC,CAAD,EAAIK,OAAJ,KAAgB;AACpEL,MAAEK,OAAF,IAAa;AACXC,YAAMI,IAAN,EAAYC,MAAZ,EAAoB;AAClBb,uBAAeO,OAAf,EAAwBC,KAAxB,CAA8BF,OAA9B,CAAsCQ,eAAe;AACnDA,sBAAYF,IAAZ,EAAkBC,MAAlB;AACD,SAFD;AAGD,OALU;AAMXJ,WAAKG,IAAL,EAAWC,MAAX,EAAmB;AACjBb,uBAAeO,OAAf,EAAwBE,IAAxB,CAA6BH,OAA7B,CAAqCQ,eAAe;AAClDA,sBAAYF,IAAZ,EAAkBC,MAAlB;AACD,SAFD;AAGD;AAVU,KAAb;AAYA,WAAOX,CAAP;AACD,GAdkB,EAchB,EAdgB,CAAnB;AAeA;AACA,SAAOS,UAAP;AACD;;kBAEcb,a","file":"merge-visitors.js","sourcesContent":["/* eslint-disable no-param-reassign */\nfunction mergeVisitors(...visitors) {\n  // e.g: visitors = [{ Program: { enter: function ProgramEnter1() {} } }, { Program: { enter: function ProgramEnter2() {} } }].\n  const newVisitorData = visitors.reduce((v, visitor) => {\n    Object.keys(visitor).forEach(nodeKey => {\n      if (!v[nodeKey]) {\n        v[nodeKey] = {\n          enter: [],\n          exit: []\n        };\n      }\n      if (visitor[nodeKey].enter) {\n        v[nodeKey].enter.push(visitor[nodeKey].enter);\n      }\n      if (visitor[nodeKey].exit) {\n        v[nodeKey].exit.push(visitor[nodeKey].exit);\n      }\n    });\n    return v;\n  }, {});\n  // e.g: newVisitorData = { Program: { enter: [function ProgramEnter1() {}, function ProgramEnter2() {}] } }.\n  const newVisitor = Object.keys(newVisitorData).reduce((v, nodeKey) => {\n    v[nodeKey] = {\n      enter(node, parent) {\n        newVisitorData[nodeKey].enter.forEach(visitorNode => {\n          visitorNode(node, parent);\n        });\n      },\n      exit(node, parent) {\n        newVisitorData[nodeKey].exit.forEach(visitorNode => {\n          visitorNode(node, parent);\n        });\n      }\n    };\n    return v;\n  }, {});\n  // e.g: newVisitor = { Program: { enter() => { ProgramEnter1(); ProgramEnter2(); }}.\n  return newVisitor;\n}\n\nexport default mergeVisitors;\n"]}