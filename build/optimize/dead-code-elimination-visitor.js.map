{"version":3,"sources":["../../src/optimize/dead-code-elimination-visitor.js"],"names":["deadCodeElimination","Attribute","exit","node","parent","value","attributes","filter","attr","expression","result","remove","confident","undefined","includes","InterpolationEscaped","type","textName","Condition","enter","evaluates","test","conditionName","alternate","consequent","identifiers","Object","assign","children","map","child","Boolean"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,sBAAsB;AAC1BC,aAAW;AACTC,SAAKC,IAAL,EAAWC,MAAX,EAAmB;AACjB,UAAID,KAAKE,KAAL,KAAe,WAAnB,EAAgC;AAC9BD,eAAOE,UAAP,GAAoBF,OAAOE,UAAP,CAAkBC,MAAlB,CAAyBC,QAAQA,SAASL,IAA1C,CAApB;AACA;AACD;AACD,UAAIA,KAAKM,UAAT,EAAqB;AACnB,cAAMC,SAAS,wBAASP,KAAKE,KAAd,CAAf;AACA,cAAMM,SAASD,OAAOE,SAAP,IAAoB,CAAC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,CAA2BJ,OAAOL,KAAlC,CAAnC;AACA,YAAIM,MAAJ,EAAY;AACVP,iBAAOE,UAAP,GAAoBF,OAAOE,UAAP,CAAkBC,MAAlB,CAAyBC,QAAQA,SAASL,IAA1C,CAApB;AACA;AACD;AACD,YAAIO,OAAOE,SAAP,IAAoB,CAAC,QAAD,EAAW,QAAX,EAAqBE,QAArB,CAA8B,OAAOJ,OAAOL,KAA5C,CAAxB,EAA4E;AAC1EF,eAAKE,KAAL,GAAaK,OAAOL,KAApB;AACAF,eAAKM,UAAL,GAAkB,KAAlB;AACD;AACF;AACF;AAlBQ,GADe;AAqB1BM,wBAAsB;AACpBb,SAAKC,IAAL,EAAW;AACT,UAAIA,KAAKE,KAAL,KAAe,WAAnB,EAAgC;AAC9B;AACAF,aAAKE,KAAL,GAAa,EAAb;AACAF,aAAKa,IAAL,GAAYC,aAAZ;AACD;AACF;AAPmB,GArBI;AA8B1BC,aAAW;AACTC,UAAMhB,IAAN,EAAYC,MAAZ,EAAoB;AAClB,YAAMgB,YAAY,wBAASjB,KAAKkB,IAAd,CAAlB;AACA,UAAID,cAAc,KAAlB,EAAyB;AACvB,YAAIhB,OAAOY,IAAP,KAAgBM,kBAApB,EAAmC;AACjC,iBAAOlB,OAAOY,IAAd;AACA,iBAAOZ,OAAOiB,IAAd;AACA,iBAAOjB,OAAOmB,SAAd;AACA,iBAAOnB,OAAOoB,UAAd;AACA,iBAAOpB,OAAOqB,WAAd;AACAC,iBAAOC,MAAP,CAAcvB,MAAd,EAAsBD,KAAKoB,SAA3B;AACA;AACD;AACDnB,eAAOwB,QAAP,GAAkBxB,OAAOwB,QAAP,CACfC,GADe,CACXC,SAAS;AACZ,cAAIA,UAAU3B,IAAd,EAAoB;AAClB,mBAAOA,KAAKoB,SAAZ;AACD;AACD,iBAAOO,KAAP;AACD,SANe,EAOfvB,MAPe,CAORwB,OAPQ,CAAlB;AAQA;AACD;AACD,UAAIX,cAAc,IAAlB,EAAwB;AACtBhB,eAAOwB,QAAP,GAAkBxB,OAAOwB,QAAP,CACfC,GADe,CACXC,SAAS;AACZ,cAAIA,UAAU3B,IAAd,EAAoB;AAClB,mBAAOA,KAAKqB,UAAZ;AACD;AACD,iBAAOM,KAAP;AACD,SANe,EAOfvB,MAPe,CAORwB,OAPQ,CAAlB;AAQD;AACF;AAjCQ;AA9Be,CAA5B,C,CALA;kBAwEe/B,mB","file":"dead-code-elimination-visitor.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport evaluate from './evaluate';\nimport isTruthy from './is-truthy';\nimport { conditionName, textName } from '../ast';\n\nconst deadCodeElimination = {\n  Attribute: {\n    exit(node, parent) {\n      if (node.value === 'undefined') {\n        parent.attributes = parent.attributes.filter(attr => attr !== node);\n        return;\n      }\n      if (node.expression) {\n        const result = evaluate(node.value);\n        const remove = result.confident && [null, undefined].includes(result.value);\n        if (remove) {\n          parent.attributes = parent.attributes.filter(attr => attr !== node);\n          return;\n        }\n        if (result.confident && ['string', 'number'].includes(typeof result.value)) {\n          node.value = result.value;\n          node.expression = false;\n        }\n      }\n    }\n  },\n  InterpolationEscaped: {\n    exit(node) {\n      if (node.value === 'undefined') {\n        // HACK: to \"remove\" InterpolationEscaped.\n        node.value = '';\n        node.type = textName;\n      }\n    }\n  },\n  Condition: {\n    enter(node, parent) {\n      const evaluates = isTruthy(node.test);\n      if (evaluates === false) {\n        if (parent.type === conditionName) {\n          delete parent.type;\n          delete parent.test;\n          delete parent.alternate;\n          delete parent.consequent;\n          delete parent.identifiers;\n          Object.assign(parent, node.alternate);\n          return;\n        }\n        parent.children = parent.children\n          .map(child => {\n            if (child === node) {\n              return node.alternate;\n            }\n            return child;\n          })\n          .filter(Boolean);\n        return;\n      }\n      if (evaluates === true) {\n        parent.children = parent.children\n          .map(child => {\n            if (child === node) {\n              return node.consequent;\n            }\n            return child;\n          })\n          .filter(Boolean);\n      }\n    }\n  }\n};\n\nexport default deadCodeElimination;\n"]}