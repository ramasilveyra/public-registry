{"version":3,"sources":["../../src/utils/inline-styles.js"],"names":["inlineStyles","styles","stylesString","Object","keys","map","styleName","parsedStyleName","hyphenateStyleName","styleValue","parsedStyleValue","generateStyleValue","property","filter","Boolean","join","uppercasePattern","msPattern","name","replace","toLowerCase","isUnitlessNumber","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","prefixes","forEach","prop","prefix","prefixKey","key","charAt","toUpperCase","substring","value","isEmpty","trim"],"mappings":"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","file":"inline-styles.js","sourcesContent":["export default function inlineStyles(styles) {\n  const stylesString = Object.keys(styles)\n    .map(styleName => {\n      const parsedStyleName = hyphenateStyleName(styleName);\n      const styleValue = styles[styleName];\n      const parsedStyleValue = generateStyleValue(styleName, styleValue);\n      if (!parsedStyleValue) {\n        return null;\n      }\n      const property = `${parsedStyleName}: ${parsedStyleValue}`;\n      return property;\n    })\n    .filter(Boolean)\n    .join('; ');\n  return stylesString;\n}\n\nconst uppercasePattern = /([A-Z])/g;\nconst msPattern = /^ms-/;\n\nfunction hyphenateStyleName(name) {\n  return name\n    .replace(uppercasePattern, '-$1')\n    .toLowerCase()\n    .replace(msPattern, '-ms-');\n}\n\nconst isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\nconst prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\nObject.keys(isUnitlessNumber).forEach(prop => {\n  prefixes.forEach(prefix => {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\nfunction generateStyleValue(name, value) {\n  const isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  if (typeof value === 'number' && value !== 0 && !isUnitlessNumber[name]) {\n    return `${value}px`;\n  }\n\n  return `${value}`.trim();\n}\n"]}