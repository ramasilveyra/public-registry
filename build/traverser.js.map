{"version":3,"sources":["../src/traverser.js"],"names":["traverser","ast","visitor","traverseArray","array","parent","forEach","child","traverseNode","node","method","type","enter","rootName","mixinName","children","elementName","attributes","conditionName","consequent","alternate","iterationName","body","textName","attributeName","interpolationEscapedName","TypeError","exit"],"mappings":";;;;;kBAWwBA,S;;AAXxB;;AAWe,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AAC9C,WAASC,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACpCD,UAAME,OAAN,CAAcC,SAAS;AACrBC,mBAAaD,KAAb,EAAoBF,MAApB;AACD,KAFD;AAGD;;AAED,WAASG,YAAT,CAAsBC,IAAtB,EAA4BJ,MAA5B,EAAoC;AAClC,UAAMK,SAASR,QAAQO,KAAKE,IAAb,CAAf;;AAEA,QAAID,UAAUA,OAAOE,KAArB,EAA4B;AAC1BF,aAAOE,KAAP,CAAaH,IAAb,EAAmBJ,MAAnB;AACD;;AAED,YAAQI,KAAKE,IAAb;AACE,WAAKE,aAAL;AACA,WAAKC,cAAL;AACEX,sBAAcM,KAAKM,QAAnB,EAA6BN,IAA7B;AACA;AACF,WAAKO,gBAAL;AACEb,sBAAcM,KAAKM,QAAnB,EAA6BN,IAA7B;AACAN,sBAAcM,KAAKQ,UAAnB,EAA+BR,IAA/B;AACA;AACF,WAAKS,kBAAL;AACEV,qBAAaC,KAAKU,UAAlB,EAA8BV,IAA9B;AACA,YAAIA,KAAKW,SAAT,EAAoB;AAClBZ,uBAAaC,KAAKW,SAAlB,EAA6BX,IAA7B;AACD;AACD;AACF,WAAKY,kBAAL;AACEb,qBAAaC,KAAKa,IAAlB,EAAwBb,IAAxB;AACA;AACF,WAAKc,aAAL;AACA,WAAKC,kBAAL;AACA,WAAKC,6BAAL;AACE;AACF;AACE,cAAM,IAAIC,SAAJ,CAAcjB,KAAKE,IAAnB,CAAN;AAvBJ;;AA0BA,QAAID,UAAUA,OAAOiB,IAArB,EAA2B;AACzBjB,aAAOiB,IAAP,CAAYlB,IAAZ,EAAkBJ,MAAlB;AACD;AACF;;AAEDG,eAAaP,GAAb,EAAkB,IAAlB;AACD","file":"traverser.js","sourcesContent":["import {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\n\nexport default function traverser(ast, visitor) {\n  function traverseArray(array, parent) {\n    array.forEach(child => {\n      traverseNode(child, parent);\n    });\n  }\n\n  function traverseNode(node, parent) {\n    const method = visitor[node.type];\n\n    if (method && method.enter) {\n      method.enter(node, parent);\n    }\n\n    switch (node.type) {\n      case rootName:\n      case mixinName:\n        traverseArray(node.children, node);\n        break;\n      case elementName:\n        traverseArray(node.children, node);\n        traverseArray(node.attributes, node);\n        break;\n      case conditionName:\n        traverseNode(node.consequent, node);\n        if (node.alternate) {\n          traverseNode(node.alternate, node);\n        }\n        break;\n      case iterationName:\n        traverseNode(node.body, node);\n        break;\n      case textName:\n      case attributeName:\n      case interpolationEscapedName:\n        break;\n      default:\n        throw new TypeError(node.type);\n    }\n\n    if (method && method.exit) {\n      method.exit(node, parent);\n    }\n  }\n\n  traverseNode(ast, null);\n}\n"]}