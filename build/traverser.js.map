{"version":3,"sources":["../src/traverser.js"],"names":["traverser","ast","visitor","traverseArray","array","parent","forEach","child","traverseNode","node","method","type","_parent","enter","rootName","mixinName","children","elementName","attributes","conditionName","consequent","alternate","iterationName","body","attributeName","isNode","valueNode","textName","interpolationEscapedName","interpolationUnescapedName","TypeError","exit"],"mappings":";;;;;kBAawBA,S;;AAZxB;;AAYe,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AAC9C,WAASC,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACpCD,UAAME,OAAN,CAAcC,SAAS;AACrBC,mBAAaD,KAAb,EAAoBF,MAApB;AACD,KAFD;AAGD;;AAED,WAASG,YAAT,CAAsBC,IAAtB,EAA4BJ,MAA5B,EAAoC;AAClC,UAAMK,SAASR,QAAQO,KAAKE,IAAb,CAAf;;AAEAF,SAAKG,OAAL,GAAeP,MAAf;;AAEA,QAAIK,UAAUA,OAAOG,KAArB,EAA4B;AAC1BH,aAAOG,KAAP,CAAaJ,IAAb,EAAmBJ,MAAnB;AACD;;AAED,YAAQI,KAAKE,IAAb;AACE,WAAKG,aAAL;AACA,WAAKC,cAAL;AACEZ,sBAAcM,KAAKO,QAAnB,EAA6BP,IAA7B;AACA;AACF,WAAKQ,gBAAL;AACEd,sBAAcM,KAAKO,QAAnB,EAA6BP,IAA7B;AACAN,sBAAcM,KAAKS,UAAnB,EAA+BT,IAA/B;AACA;AACF,WAAKU,kBAAL;AACEX,qBAAaC,KAAKW,UAAlB,EAA8BX,IAA9B;AACA,YAAIA,KAAKY,SAAT,EAAoB;AAClBb,uBAAaC,KAAKY,SAAlB,EAA6BZ,IAA7B;AACD;AACD;AACF,WAAKa,kBAAL;AACEd,qBAAaC,KAAKc,IAAlB,EAAwBd,IAAxB;AACA;AACF,WAAKe,kBAAL;AACE,YAAIf,KAAKgB,MAAL,IAAehB,KAAKiB,SAAxB,EAAmC;AACjClB,uBAAaC,KAAKiB,SAAlB,EAA6BjB,IAA7B;AACD;AACD;AACF,WAAKkB,aAAL;AACA,WAAKC,6BAAL;AACA,WAAKC,+BAAL;AACE;AACF;AACE,cAAM,IAAIC,SAAJ,CAAcrB,KAAKE,IAAnB,CAAN;AA5BJ;;AA+BA,QAAID,UAAUA,OAAOqB,IAArB,EAA2B;AACzBrB,aAAOqB,IAAP,CAAYtB,IAAZ,EAAkBJ,MAAlB;AACD;AACF;;AAEDG,eAAaP,GAAb,EAAkB,IAAlB;AACD,C,CAlED","file":"traverser.js","sourcesContent":["/* eslint-disable no-param-reassign, no-underscore-dangle */\nimport {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  interpolationUnescapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\n\nexport default function traverser(ast, visitor) {\n  function traverseArray(array, parent) {\n    array.forEach(child => {\n      traverseNode(child, parent);\n    });\n  }\n\n  function traverseNode(node, parent) {\n    const method = visitor[node.type];\n\n    node._parent = parent;\n\n    if (method && method.enter) {\n      method.enter(node, parent);\n    }\n\n    switch (node.type) {\n      case rootName:\n      case mixinName:\n        traverseArray(node.children, node);\n        break;\n      case elementName:\n        traverseArray(node.children, node);\n        traverseArray(node.attributes, node);\n        break;\n      case conditionName:\n        traverseNode(node.consequent, node);\n        if (node.alternate) {\n          traverseNode(node.alternate, node);\n        }\n        break;\n      case iterationName:\n        traverseNode(node.body, node);\n        break;\n      case attributeName:\n        if (node.isNode && node.valueNode) {\n          traverseNode(node.valueNode, node);\n        }\n        break;\n      case textName:\n      case interpolationEscapedName:\n      case interpolationUnescapedName:\n        break;\n      default:\n        throw new TypeError(node.type);\n    }\n\n    if (method && method.exit) {\n      method.exit(node, parent);\n    }\n  }\n\n  traverseNode(ast, null);\n}\n"]}