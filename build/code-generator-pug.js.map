{"version":3,"sources":["../src/code-generator-pug.js"],"names":["codeGeneratorPug","node","initialIndentLevel","indentLevel","previousSibling","type","rootName","children","map","child","join","mixinName","elementName","indent","generateTag","tagName","i","attributes","textName","value","attributeName","generateProperty","name","isBoolean","isString","valuePath","interpolationEscapedName","conditionName","includes","generateInterpolationEscaped","generateCondition","testPath","consequent","alternate","iterationName","generateIteration","iterablePath","currentValuePath","indexPath","arrayPath","body","TypeError","properties","startTag","htmlTagsVoids","addSpace","tag","normalizedName","generatedValue","concise","code","newConsequent","fixConsequent","alternateOrNull","stuff","conditionArray","filter","Boolean","startsWith","endsWith","iterableCode","currentValueCode","indexCode","arrayCode","params","iterationArray","generateScriptlet","str","indentChar","indentLength","startIndentNumber","isRoot","strIndented","repeat"],"mappings":"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","file":"code-generator-pug.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport htmlTagsVoids from 'html-tags/void';\nimport babelGenerator from '@babel/generator';\nimport {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\nimport normalizePropertyName from './utils/normalize-property-name';\n\nfunction codeGeneratorPug(\n  node,\n  { initialIndentLevel = 0, indentLevel = initialIndentLevel, previousSibling = null } = {}\n) {\n  switch (node.type) {\n    case rootName:\n      return node.children\n        .map(child => codeGeneratorPug(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case mixinName:\n      return node.children\n        .map(child => codeGeneratorPug(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case elementName:\n      return indent(\n        generateTag(\n          node.tagName,\n          node.children\n            .map((child, i) =>\n              codeGeneratorPug(child, {\n                initialIndentLevel,\n                indentLevel: indentLevel + 1,\n                previousSibling: i > 0 ? node.children[i - 1] : null\n              })\n            )\n            .join(''),\n          node.attributes\n            .map(child =>\n              codeGeneratorPug(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join(', ')\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case textName:\n      if (previousSibling && previousSibling.type === elementName) {\n        return indent(`| ${node.value}`, { initialIndentLevel, indentLevel });\n      }\n      return node.value;\n    case attributeName:\n      return generateProperty({\n        name: node.name,\n        isBoolean: node.isBoolean,\n        isString: node.isString,\n        value: node.value,\n        valuePath: node.valuePath\n      });\n    case interpolationEscapedName:\n      if (previousSibling && [elementName, conditionName].includes(previousSibling.type)) {\n        return indent(`| ${generateInterpolationEscaped(node.valuePath)}`, {\n          initialIndentLevel,\n          indentLevel\n        });\n      }\n      return generateInterpolationEscaped(node.valuePath);\n    case conditionName:\n      return indent(\n        generateCondition(\n          node.testPath,\n          codeGeneratorPug(node.consequent, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          node.alternate &&\n            codeGeneratorPug(node.alternate, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          initialIndentLevel,\n          indentLevel + 1\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case iterationName:\n      return indent(\n        generateIteration({\n          iterablePath: node.iterablePath,\n          currentValuePath: node.currentValuePath,\n          indexPath: node.indexPath,\n          arrayPath: node.arrayPath,\n          body: codeGeneratorPug(node.body, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          initialIndentLevel,\n          indentLevel\n        }),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    default:\n      throw new TypeError(node.type);\n  }\n}\n\nexport default codeGeneratorPug;\n\nfunction generateTag(tagName, children, properties) {\n  const startTag = `${tagName}${properties ? '(' : ''}${properties}${properties ? ')' : ''}`;\n  if (htmlTagsVoids.includes(tagName)) {\n    return startTag;\n  }\n  const addSpace = children && !children[0].includes('\\n');\n  const tag = startTag + (addSpace ? ` ${children}` : children);\n  return tag;\n}\n\nfunction generateProperty({ name, isBoolean, isString, value, valuePath }) {\n  const normalizedName = normalizePropertyName(name);\n\n  if (isBoolean) {\n    return normalizedName;\n  }\n\n  if (isString) {\n    return `${normalizedName}=\"${value}\"`;\n  }\n\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  return `${normalizedName}=${generatedValue.code}`;\n}\n\nfunction generateCondition(testPath, consequent, alternate, initialIndentLevel, indentLevel) {\n  const generatedValue = babelGenerator(testPath.node, { concise: true });\n  const newConsequent = fixConsequent(consequent, initialIndentLevel, indentLevel);\n  const alternateOrNull = stuff => (alternate ? stuff() : null);\n  const conditionArray = [\n    `if ${generatedValue.code}`,\n    newConsequent,\n    alternateOrNull(() => indent('else', { initialIndentLevel, indentLevel: indentLevel - 1 })),\n    alternateOrNull(\n      () =>\n        alternate[0] === '\\n' ? alternate : indent(alternate, { initialIndentLevel, indentLevel })\n    )\n  ].filter(Boolean);\n  return conditionArray.join('');\n}\n\nfunction fixConsequent(consequent, initialIndentLevel, indentLevel) {\n  if (consequent[0] === '\\n') {\n    return consequent;\n  }\n  if (consequent.startsWith('#{') && consequent.endsWith('}')) {\n    return indent(`| ${consequent}`, { initialIndentLevel, indentLevel });\n  }\n  return indent(consequent, { initialIndentLevel, indentLevel });\n}\n\nfunction generateIteration({\n  iterablePath,\n  currentValuePath,\n  indexPath,\n  arrayPath,\n  body,\n  initialIndentLevel,\n  indentLevel\n}) {\n  const iterableCode = babelGenerator(iterablePath.node, { concise: true }).code;\n  const currentValueCode = currentValuePath\n    ? babelGenerator(currentValuePath.node, { concise: true }).code\n    : null;\n  const indexCode = indexPath ? babelGenerator(indexPath.node, { concise: true }).code : null;\n  const arrayCode = arrayPath ? babelGenerator(arrayPath.node, { concise: true }).code : null;\n  const params = [currentValueCode, indexCode].filter(Boolean).join(', ');\n  const iterationArray = [\n    `each ${params} in ${iterableCode}`,\n    arrayCode\n      ? indent(generateScriptlet(`const ${arrayCode} = ${iterableCode};`), {\n          initialIndentLevel,\n          indentLevel: indentLevel + 1\n        })\n      : null,\n    body\n  ].filter(Boolean);\n  return iterationArray.join('');\n}\n\nfunction generateScriptlet(value) {\n  return `- ${value}`;\n}\n\nfunction generateInterpolationEscaped(valuePath) {\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  return `#{${generatedValue.code}}`;\n}\n\nfunction indent(str, { initialIndentLevel, indentLevel }) {\n  const indentChar = ' ';\n  const indentLength = 2;\n  const startIndentNumber = indentLevel * indentLength;\n  const isRoot = indentLevel === initialIndentLevel;\n  const strIndented = `${isRoot ? '' : '\\n'}${indentChar.repeat(startIndentNumber)}${str}${\n    isRoot ? '\\n' : ''\n  }`;\n  return strIndented;\n}\n"]}