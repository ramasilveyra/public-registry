{"version":3,"sources":["../src/code-generator-pug.js"],"names":["codeGeneratorPug","node","initialIndentLevel","indentLevel","previousSibling","type","rootName","children","map","child","join","mixinName","elementName","indent","generateTag","tagName","i","attributes","textName","conditionName","value","attributeName","generateProperty","name","isBoolean","isString","valuePath","interpolationUnescapedName","interpolationEscapedName","includes","generateInterpolation","generateCondition","testPath","consequent","alternate","iterationName","generateIteration","iterablePath","currentValuePath","indexPath","arrayPath","body","TypeError","properties","startTag","htmlTagsVoids","addSpace","tag","normalizedName","generatedValue","concise","code","alternateOrNull","stuff","generatedIf","generatedConsequent","fixConsequent","generatedElse","generatedAlternate","conditionArray","filter","Boolean","startsWith","endsWith","iterableCode","currentValueCode","indexCode","arrayCode","params","iterationArray","generateScriptlet","str","indentChar","indentLength","startIndentNumber","isRoot","strIndented","repeat"],"mappings":"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","file":"code-generator-pug.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport htmlTagsVoids from 'html-tags/void';\nimport babelGenerator from '@babel/generator';\nimport {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  interpolationUnescapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\nimport normalizePropertyName from './utils/normalize-property-name';\n\nfunction codeGeneratorPug(\n  node,\n  { initialIndentLevel = 0, indentLevel = initialIndentLevel, previousSibling = null } = {}\n) {\n  switch (node.type) {\n    case rootName:\n      return node.children\n        .map(child => codeGeneratorPug(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case mixinName:\n      return node.children\n        .map(child => codeGeneratorPug(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case elementName:\n      return indent(\n        generateTag(\n          node.tagName,\n          node.children\n            .map((child, i) =>\n              codeGeneratorPug(child, {\n                initialIndentLevel,\n                indentLevel: indentLevel + 1,\n                previousSibling: i > 0 ? node.children[i - 1] : null\n              })\n            )\n            .join(''),\n          node.attributes\n            .map(child =>\n              codeGeneratorPug(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join(', ')\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case textName:\n      if (previousSibling && previousSibling.type === conditionName) {\n        return indent(`| ${node.value}`, { initialIndentLevel, indentLevel });\n      }\n      if (previousSibling && previousSibling.type === elementName) {\n        return indent(`| ${node.value}`, { initialIndentLevel, indentLevel });\n      }\n      if (previousSibling && previousSibling.type === mixinName) {\n        return indent(`| ${node.value}`, { initialIndentLevel, indentLevel });\n      }\n      return node.value;\n    case attributeName:\n      return generateProperty({\n        name: node.name,\n        isBoolean: node.isBoolean,\n        isString: node.isString,\n        value: node.value,\n        valuePath: node.valuePath\n      });\n    case interpolationUnescapedName:\n    case interpolationEscapedName: {\n      const type = node.type === interpolationEscapedName ? 'escaped' : 'unescaped';\n      if (previousSibling && [elementName, conditionName].includes(previousSibling.type)) {\n        return indent(`| ${generateInterpolation(type, node.valuePath)}`, {\n          initialIndentLevel,\n          indentLevel\n        });\n      }\n      return generateInterpolation(type, node.valuePath);\n    }\n    case conditionName:\n      return indent(\n        generateCondition(\n          node.testPath,\n          codeGeneratorPug(node.consequent, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          node.alternate &&\n            codeGeneratorPug(node.alternate, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          initialIndentLevel,\n          indentLevel + 1\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case iterationName:\n      return indent(\n        generateIteration({\n          iterablePath: node.iterablePath,\n          currentValuePath: node.currentValuePath,\n          indexPath: node.indexPath,\n          arrayPath: node.arrayPath,\n          body: codeGeneratorPug(node.body, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          initialIndentLevel,\n          indentLevel\n        }),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    default:\n      throw new TypeError(node.type);\n  }\n}\n\nexport default codeGeneratorPug;\n\nfunction generateTag(tagName, children, properties) {\n  const startTag = `${tagName}${properties ? '(' : ''}${properties}${properties ? ')' : ''}`;\n  if (htmlTagsVoids.includes(tagName)) {\n    return startTag;\n  }\n  const addSpace = children && !children[0].includes('\\n');\n  const tag = startTag + (addSpace ? ` ${children}` : children);\n  return tag;\n}\n\nfunction generateProperty({ name, isBoolean, isString, value, valuePath }) {\n  const normalizedName = normalizePropertyName(name);\n\n  if (isBoolean) {\n    return normalizedName;\n  }\n\n  if (isString) {\n    return `${normalizedName}=\"${value}\"`;\n  }\n\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  return `${normalizedName}=${generatedValue.code}`;\n}\n\nfunction generateCondition(testPath, consequent, alternate, initialIndentLevel, indentLevel) {\n  const alternateOrNull = stuff => (alternate ? stuff() : null);\n  const generatedValue = babelGenerator(testPath.node, { concise: true });\n  const generatedIf = `if ${generatedValue.code}`;\n  const generatedConsequent = fixConsequent(consequent, initialIndentLevel, indentLevel);\n  const generatedElse = alternateOrNull(() =>\n    indent('else', { initialIndentLevel, indentLevel: indentLevel - 1 })\n  );\n  const generatedAlternate = alternateOrNull(\n    () =>\n      alternate[0] === '\\n' ? alternate : indent(alternate, { initialIndentLevel, indentLevel })\n  );\n  const conditionArray = [\n    generatedIf,\n    generatedConsequent,\n    generatedElse && generatedElse[0] === 'e' ? `\\n${generatedElse}` : generatedElse,\n    generatedAlternate\n  ].filter(Boolean);\n  return conditionArray.join('');\n}\n\nfunction fixConsequent(consequent, initialIndentLevel, indentLevel) {\n  if (consequent[0] === '\\n') {\n    return consequent;\n  }\n  if (consequent.startsWith('#{') && consequent.endsWith('}')) {\n    return indent(`| ${consequent}`, { initialIndentLevel, indentLevel });\n  }\n  return indent(consequent, { initialIndentLevel, indentLevel });\n}\n\nfunction generateIteration({\n  iterablePath,\n  currentValuePath,\n  indexPath,\n  arrayPath,\n  body,\n  initialIndentLevel,\n  indentLevel\n}) {\n  const iterableCode = babelGenerator(iterablePath.node, { concise: true }).code;\n  const currentValueCode = currentValuePath\n    ? babelGenerator(currentValuePath.node, { concise: true }).code\n    : null;\n  const indexCode = indexPath ? babelGenerator(indexPath.node, { concise: true }).code : null;\n  const arrayCode = arrayPath ? babelGenerator(arrayPath.node, { concise: true }).code : null;\n  const params = [currentValueCode, indexCode].filter(Boolean).join(', ');\n  const iterationArray = [\n    `each ${params} in ${iterableCode}`,\n    arrayCode\n      ? indent(generateScriptlet(`const ${arrayCode} = ${iterableCode};`), {\n          initialIndentLevel,\n          indentLevel: indentLevel + 1\n        })\n      : null,\n    body\n  ].filter(Boolean);\n  return iterationArray.join('');\n}\n\nfunction generateScriptlet(value) {\n  return `- ${value}`;\n}\n\nfunction generateInterpolation(type, valuePath) {\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  if (type === 'unescaped') {\n    return `!{${generatedValue.code}}`;\n  }\n  return `#{${generatedValue.code}}`;\n}\n\nfunction indent(str, { initialIndentLevel, indentLevel }) {\n  const indentChar = ' ';\n  const indentLength = 2;\n  const startIndentNumber = indentLevel * indentLength;\n  const isRoot = indentLevel === initialIndentLevel;\n  const strIndented = `${isRoot ? '' : '\\n'}${indentChar.repeat(startIndentNumber)}${str}${\n    isRoot ? '\\n' : ''\n  }`;\n  return strIndented;\n}\n"]}