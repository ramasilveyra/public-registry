{"version":3,"sources":["../../../src/tasks/Publish/index.js"],"names":["PublishTask","run","registry","pkgPath","process","cwd","emit","readPackageManifest","pkg","gitpkgRegistryURL","gitpkgRegistry","gitpkgPackage","name","version"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEe,MAAMA,WAAN,wBAA+B;AACtCC,KAAN,CAAU,EAAEC,QAAF,EAAYC,UAAUC,QAAQC,GAAR,EAAtB,KAAwC,EAAlD,EAAsD;AAAA;;AAAA;AACpD,YAAKC,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,yCAA3B;AACA;AACA,YAAM,MAAKC,mBAAL,CAAyBJ,OAAzB,CAAN;AACA,YAAKG,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,gCAA3B;AACA;AACA;AACA,YAAM,mCAAoB,YAApB,EAAkC,MAAKE,GAAvC,EAA4CL,OAA5C,oBAAqD,aAAY;AACrE,cAAM,MAAKI,mBAAL,CAAyBJ,OAAzB,CAAN;AACD,OAFK,EAAN;AAGA,YAAM,mCAAoB,gBAApB,EAAsC,MAAKK,GAA3C,EAAgDL,OAAhD,oBAAyD,aAAY;AACzE,cAAM,MAAKI,mBAAL,CAAyBJ,OAAzB,CAAN;AACD,OAFK,EAAN;AAGA,YAAM,mCAAoB,SAApB,EAA+B,MAAKK,GAApC,EAAyCL,OAAzC,oBAAkD,aAAY;AAClE,cAAM,MAAKI,mBAAL,CAAyBJ,OAAzB,CAAN;AACD,OAFK,EAAN;AAGA;AACA,YAAKG,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,uBAA3B;AACA,YAAM,8BAAe,MAAKE,GAApB,EAAyBL,OAAzB,CAAN;AACA,YAAKG,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,uBAA3B;AACA;AACA;AACA,YAAMG,oBAAoB,MAAM,8BAAeP,QAAf,EAAyB,MAAKM,GAA9B,EAAmCL,OAAnC,CAAhC;AACA,YAAM,6BAAc,MAAKK,GAAnB,EAAwBL,OAAxB,EAAiCM,iBAAjC,CAAN;AACA;AACA,YAAKH,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,gCAA3B;AACA,YAAM,mCAAoB,SAApB,EAA+B,MAAKE,GAApC,EAAyCL,OAAzC,CAAN;AACA,YAAM,mCAAoB,aAApB,EAAmC,MAAKK,GAAxC,EAA6CL,OAA7C,CAAN;;AAEA,aAAO;AACLO,wBAAgBD,iBADX;AAELE,uBAAe,6BAAc,MAAKH,GAAnB,CAFV;AAGLI,cAAM,MAAKJ,GAAL,CAASI,IAHV;AAILC,iBAAS,MAAKL,GAAL,CAASK;AAJb,OAAP;AA7BoD;AAmCrD;AApC2C;kBAAzBb,W","file":"index.js","sourcesContent":["import Task from '../Task';\nimport execLifecycleScript from './exec-lifecycle-script';\nimport preparePackage from './prepare-package';\nimport uploadPackage from './upload-package';\nimport getRegistryURL from './get-registry-url';\nimport getGitTagName from './get-git-tag-name';\n\nexport default class PublishTask extends Task {\n  async run({ registry, pkgPath = process.cwd() } = {}) {\n    this.emit('subtask', 1, 5, 'üëÄ  Reading and validating package.json');\n    // 1 - Read and validate package.json.\n    await this.readPackageManifest(pkgPath);\n    this.emit('subtask', 2, 5, 'üèá  Running prepublish scripts');\n    // 2 - Run prepublish scripts.\n    // NOTE: this scripts might modify the package.json so we need to reload it.\n    await execLifecycleScript('prepublish', this.pkg, pkgPath, async () => {\n      await this.readPackageManifest(pkgPath);\n    });\n    await execLifecycleScript('prepublishOnly', this.pkg, pkgPath, async () => {\n      await this.readPackageManifest(pkgPath);\n    });\n    await execLifecycleScript('prepare', this.pkg, pkgPath, async () => {\n      await this.readPackageManifest(pkgPath);\n    });\n    // 3 - Prepare package: npm pack and untar tarball to temp dir.\n    this.emit('subtask', 3, 5, '‚öôÔ∏è  Preparing package');\n    await preparePackage(this.pkg, pkgPath);\n    this.emit('subtask', 4, 5, '‚¨ÜÔ∏è  Uploading package');\n    // 4 - Upload package: create git tag from temp dir\n    // and push to resolved gitpkg registry.\n    const gitpkgRegistryURL = await getRegistryURL(registry, this.pkg, pkgPath);\n    await uploadPackage(this.pkg, pkgPath, gitpkgRegistryURL);\n    // 5 - Run postpublish scripts.\n    this.emit('subtask', 5, 5, 'üèá Running postpublish scripts');\n    await execLifecycleScript('publish', this.pkg, pkgPath);\n    await execLifecycleScript('postpublish', this.pkg, pkgPath);\n\n    return {\n      gitpkgRegistry: gitpkgRegistryURL,\n      gitpkgPackage: getGitTagName(this.pkg),\n      name: this.pkg.name,\n      version: this.pkg.version\n    };\n  }\n}\n"]}