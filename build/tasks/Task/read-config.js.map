{"version":3,"sources":["../../../src/tasks/Task/read-config.js"],"names":["access","bluebird","promisify","fs","configFileName","defaultConfig","registry","getTagName","defaultTagNameFormat","getNearestConfigFile","path","resolve","process","cwd","e","readConfig","configPath","configClass","config","default"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,kBAASC,SAAT,CAAmBC,YAAGH,MAAtB,CAAf;AAEA;;;;;AAGO,MAAMI,cAAc,GAAG,kBAAvB;AAEP;;;;;AAGO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,IADiB;AAE3BC,EAAAA,UAAU,EAAEC;AAFe,CAAtB;;;AAKA,eAAeC,oBAAf,GAAsC;AAC3C;AACA,MAAI;AACF,QAAI,MAAMT,MAAM,CAACU,cAAKC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BT,cAA5B,CAAD,CAAhB,EAA+D;AAC7D,aAAOA,cAAP;AACD;AACF,GAJD,CAIE,OAAOU,CAAP,EAAU,CAEX,CAFC,CACA;AAGF;;;AACA,SAAO,qBAAOV,cAAP,CAAP;AACD;AAED;;;;;;;AAKe,eAAeW,UAAf,CAA0BC,UAA1B,EAAsC;AACnD,MAAI;AACF,UAAMC,WAAW,GAAG,sEAAaD,UAAb,KAApB;AACA,QAAIE,MAAM,GAAG,EAAb;;AAEA,QAAI,OAAOD,WAAW,CAACE,OAAnB,KAA+B,UAAnC,EAA+C;AAC7CD,MAAAA,MAAM,GAAGD,WAAW,CAACE,OAAZ,EAAT;AACD,KAFD,MAEO,IAAI,OAAOF,WAAP,KAAuB,UAA3B,EAAuC;AAC5CC,MAAAA,MAAM,GAAGD,WAAW,EAApB;AACD;;AAED,WAAO,EAAE,GAAGZ,aAAL;AAAoB,SAAGa;AAAvB,KAAP;AACD,GAXD,CAWE,OAAOJ,CAAP,EAAU;AACV,WAAOT,aAAP;AACD;AACF","sourcesContent":["import findUp from 'find-up';\nimport fs from 'fs';\nimport bluebird from 'bluebird';\nimport path from 'path';\nimport { defaultTagNameFormat } from '../Publish/get-git-tag-name';\n\nconst access = bluebird.promisify(fs.access);\n\n/**\n * The name of the config file.\n */\nexport const configFileName = 'gitpkg.config.js';\n\n/**\n * Here goes any default values.\n */\nexport const defaultConfig = {\n  registry: null,\n  getTagName: defaultTagNameFormat\n};\n\nexport async function getNearestConfigFile() {\n  // First check if config file is in same dir\n  try {\n    if (await access(path.resolve(process.cwd(), configFileName))) {\n      return configFileName;\n    }\n  } catch (e) {\n    // Ignore\n  }\n\n  // Then check in parent directories\n  return findUp(configFileName);\n}\n\n/**\n * Returns an object with configurable settings.\n *\n * @param {string} directory Path to config file.\n */\nexport default async function readConfig(configPath) {\n  try {\n    const configClass = await import(configPath);\n    let config = {};\n\n    if (typeof configClass.default === 'function') {\n      config = configClass.default();\n    } else if (typeof configClass === 'function') {\n      config = configClass();\n    }\n\n    return { ...defaultConfig, ...config };\n  } catch (e) {\n    return defaultConfig;\n  }\n}\n"],"file":"read-config.js"}