{"version":3,"sources":["../src/index.js"],"names":["compile","compileFile","compileDir","readFileAsync","util","promisify","fs","readFile","writeFileAsync","writeFile","inputCode","inputFile","templateEngine","beginning","ending","initialIndentLevel","ast","table","parseTransformOptimize","codeGenerator","codeGeneratorEjs","codeGeneratorPug","bundleAST","bundleTable","resolveDependencies","optimizedAST","code","generateOutputCode","oldAst","moduleFile","moduleAST","moduleTable","depGraph","DependencyGraph","addModule","parseModule","preBundleTable","modules","map","dep","reduce","acc","item","components","Object","assign","dependencies","Promise","all","values","isUsedAsRC","depFilePath","resolveFromFile","source","path","depCode","encoding","depAST","depTable","addDependency","filePath","moduleId","depDirPath","dirname","outputCode","outputFile","progress","inputFilePath","resolve","process","cwd","outputFilePath","outputFilePathDir","relativePath","join","replace","inputDir","outputDir","inputDirPath","outputDirPath","globInputDirPath","filePaths","extension","oldExtension","extname"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport util from 'util';\nimport resolveFrom from 'resolve-from';\nimport makeDir from 'make-dir';\nimport globby from 'globby';\nimport parser from './parser';\nimport transformation from './transformation';\nimport DependencyGraph from './deps-graph';\nimport codeGeneratorEjs from './code-generator-ejs';\nimport codeGeneratorPug from './code-generator-pug';\nimport optimize from './optimize';\n\nconst readFileAsync = util.promisify(fs.readFile);\nconst writeFileAsync = util.promisify(fs.writeFile);\n\nexport async function compile(\n  inputCode,\n  { inputFile, templateEngine = 'pug', beginning = '', ending = '', initialIndentLevel = 0 } = {}\n) {\n  const { ast, table } = parseTransformOptimize(inputCode, inputFile, { templateEngine });\n  const codeGenerator = templateEngine === 'ejs' ? codeGeneratorEjs : codeGeneratorPug;\n  if (inputFile) {\n    const { bundleAST, bundleTable } = await resolveDependencies(inputFile, ast, table);\n    const optimizedAST = optimize(bundleAST, bundleTable);\n    const code = generateOutputCode(\n      codeGenerator(optimizedAST, { initialIndentLevel }),\n      beginning,\n      ending\n    );\n    return code;\n  }\n  const code = generateOutputCode(codeGenerator(ast, { initialIndentLevel }), beginning, ending);\n  return code;\n}\n\nfunction parseTransformOptimize(inputCode, inputFile) {\n  const oldAst = parser(inputCode);\n  const { ast, table } = transformation(oldAst, inputFile);\n  const optimizedAST = optimize(ast, table);\n  return { ast: optimizedAST, table };\n}\n\nasync function resolveDependencies(moduleFile, moduleAST, moduleTable) {\n  const depGraph = new DependencyGraph();\n  depGraph.addModule(moduleFile, moduleAST, moduleTable);\n  await parseModule(moduleFile, moduleTable, depGraph);\n  const preBundleTable = depGraph.modules.map(dep => dep.table);\n  const bundleTable = preBundleTable.reduce(\n    (acc, item) => ({\n      components: Object.assign({}, acc.components, item.components),\n      dependencies: Object.assign({}, acc.dependencies, item.dependencies)\n    }),\n    {}\n  );\n  return { bundleAST: moduleAST, bundleTable };\n}\n\nasync function parseModule(moduleFile, moduleTable, depGraph) {\n  await Promise.all(\n    Object.values(moduleTable.dependencies).map(async dep => {\n      if (dep.isUsedAsRC) {\n        const depFilePath = await resolveFromFile(moduleFile, dep.source);\n        dep.path = depFilePath; // eslint-disable-line no-param-reassign\n        const depCode = await readFileAsync(depFilePath, { encoding: 'utf8' });\n        const { ast: depAST, table: depTable } = parseTransformOptimize(depCode, depFilePath);\n        depGraph.addModule(depFilePath, depAST, depTable);\n        depGraph.addDependency(moduleFile, depFilePath);\n        await parseModule(depFilePath, depTable, depGraph);\n      }\n    })\n  );\n}\n\nasync function resolveFromFile(filePath, moduleId) {\n  const depDirPath = path.dirname(filePath);\n  const depFilePath = await resolveFrom(depDirPath, moduleId);\n  return depFilePath;\n}\n\nfunction generateOutputCode(code, beginning, ending) {\n  const outputCode = `${beginning}${beginning ? '\\n' : ''}${code}${ending}${ending ? '\\n' : ''}`;\n  return outputCode;\n}\n\nexport async function compileFile(\n  inputFile,\n  outputFile,\n  {\n    templateEngine = 'pug',\n    beginning = '',\n    ending = '',\n    initialIndentLevel,\n    progress = () => {}\n  } = {}\n) {\n  const inputFilePath = path.resolve(process.cwd(), inputFile);\n  const outputFilePath = path.resolve(process.cwd(), outputFile);\n  const inputCode = await readFileAsync(inputFilePath, { encoding: 'utf8' });\n  const code = await compile(inputCode, {\n    inputFile: inputFilePath,\n    templateEngine,\n    beginning,\n    ending,\n    initialIndentLevel\n  });\n  const outputFilePathDir = path.dirname(outputFilePath);\n  await makeDir(outputFilePathDir);\n  await writeFileAsync(outputFilePath, code);\n  const relativePath = path.join(process.cwd(), '/');\n  progress(`${inputFile.replace(relativePath, '')} -> ${outputFile.replace(relativePath, '')}`);\n}\n\nexport async function compileDir(\n  inputDir,\n  outputDir,\n  {\n    templateEngine = 'pug',\n    beginning = '',\n    ending = '',\n    initialIndentLevel,\n    progress = () => {}\n  } = {}\n) {\n  const inputDirPath = path.resolve(process.cwd(), inputDir);\n  const outputDirPath = path.resolve(process.cwd(), outputDir);\n  const globInputDirPath = path.join(inputDirPath, '/**/*.{js,jsx,mjs}');\n  const filePaths = await globby(globInputDirPath);\n  const extension = templateEngine === 'ejs' ? '.ejs' : '.pug';\n  await Promise.all(\n    filePaths.map(filePath => {\n      const oldExtension = path.extname(filePath);\n      const outputFile = filePath\n        .replace(inputDirPath, outputDirPath)\n        .replace(oldExtension, extension);\n      return compileFile(filePath, outputFile, {\n        templateEngine,\n        beginning,\n        ending,\n        initialIndentLevel,\n        progress\n      });\n    })\n  );\n}\n"]}