{"version":3,"sources":["../src/code-generator-ejs.js"],"names":["t","codeGeneratorEjs","node","initialIndentLevel","indentLevel","scope","type","rootName","children","map","child","join","mixinName","elementName","indent","generateTag","tagName","attributes","textName","value","attributeName","generateProperty","name","isBoolean","isString","valuePath","isRequired","interpolationEscapedName","generateInterpolationEscaped","conditionName","generateCondition","testPath","consequent","alternate","iterationName","params","getIterationParams","currentValuePath","indexPath","arrayPath","generateIteration","iterablePath","body","concat","TypeError","properties","startTagBeginning","htmlTagsVoids","includes","startTag","endTag","tag","normalizedName","startPropertyBeginning","makeReferenceSafe","generatedValue","concise","resultString","resolvesToString","propertyInterpolated","generateScriptlet","code","conditionArray","filter","Boolean","iterableCode","paramsCode","iterationArray","currentValueCode","indexCode","arrayCode","path","isIdentifier","referenceSafeReplacement","isMemberExpression","pathFirst","traverse","Identifier","path1","parent","isObjectProperty","MemberExpression","isFromScope","find","scopeVar","replaceWith","memberExpression","identifier","str","indentChar","indentLength","startIndentNumber","endIndentNumber","strIndented","repeat","isTemplateLiteral","isConditionalExpression","isStringLiteral","isBinaryExpression","operator","nodeLeft","left","nodeRight","right","isTaggedTemplateExpression"],"mappings":"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","file":"code-generator-ejs.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport htmlTagsVoids from 'html-tags/void';\nimport * as t from '@babel/types';\nimport babelGenerator from '@babel/generator';\nimport {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\nimport normalizePropertyName from './utils/normalize-property-name';\nimport getFirstMemberExpression from './utils/get-first-member-expression';\n\nfunction codeGeneratorEjs(\n  node,\n  { initialIndentLevel = 0, indentLevel = initialIndentLevel, scope = [] } = {}\n) {\n  switch (node.type) {\n    case rootName:\n      return node.children\n        .map(child => codeGeneratorEjs(child, { initialIndentLevel, indentLevel, scope }))\n        .join('');\n    case mixinName:\n      return node.children\n        .map(child => codeGeneratorEjs(child, { initialIndentLevel, indentLevel, scope }))\n        .join('');\n    case elementName:\n      return indent(\n        generateTag(\n          node.tagName,\n          node.children\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1, scope })\n            )\n            .join(''),\n          node.attributes\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1, scope })\n            )\n            .join('')\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case textName:\n      return node.value;\n    case attributeName:\n      return generateProperty({\n        name: node.name,\n        isBoolean: node.isBoolean,\n        isString: node.isString,\n        value: node.value,\n        valuePath: node.valuePath,\n        isRequired: node.isRequired,\n        scope\n      });\n    case interpolationEscapedName:\n      return generateInterpolationEscaped(node.valuePath, scope);\n    case conditionName:\n      return indent(\n        generateCondition(\n          node.testPath,\n          codeGeneratorEjs(node.consequent, {\n            initialIndentLevel,\n            indentLevel: indentLevel + 1,\n            scope\n          }),\n          node.alternate &&\n            codeGeneratorEjs(node.alternate, {\n              initialIndentLevel,\n              indentLevel: indentLevel + 1,\n              scope\n            }),\n          scope\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case iterationName: {\n      const params = getIterationParams(node.currentValuePath, node.indexPath, node.arrayPath);\n      return indent(\n        generateIteration({\n          iterablePath: node.iterablePath,\n          params,\n          body: codeGeneratorEjs(node.body, {\n            initialIndentLevel,\n            indentLevel: indentLevel + 1,\n            scope: scope.concat(params)\n          }),\n          scope\n        }),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    }\n    default:\n      throw new TypeError(node.type);\n  }\n}\n\nexport default codeGeneratorEjs;\n\nfunction generateTag(tagName, children, properties) {\n  const startTagBeginning = `<${tagName}${properties}`;\n  if (htmlTagsVoids.includes(tagName)) {\n    return `${startTagBeginning} />`;\n  }\n  const startTag = `${startTagBeginning}>`;\n  const endTag = `</${tagName}>`;\n  const tag = startTag + children + endTag;\n\n  return tag;\n}\n\nfunction generateProperty({ name, isBoolean, isString, value, valuePath, isRequired, scope }) {\n  const normalizedName = normalizePropertyName(name);\n  const startPropertyBeginning = ` ${normalizedName}`;\n\n  if (isBoolean) {\n    return startPropertyBeginning;\n  }\n\n  if (isString) {\n    return `${startPropertyBeginning}=\"${value}\"`;\n  }\n\n  makeReferenceSafe(valuePath, scope);\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  const resultString = resolvesToString(valuePath);\n  const propertyInterpolated = `${startPropertyBeginning}=\"${generateInterpolationEscaped(\n    valuePath,\n    scope\n  )}\"`;\n  if (!resultString && !isRequired) {\n    return `${generateScriptlet(\n      `if (![null,undefined].includes(${generatedValue.code})) {`\n    )}${propertyInterpolated}${generateScriptlet('}')}`;\n  }\n  return propertyInterpolated;\n}\n\nfunction generateCondition(testPath, consequent, alternate, scope) {\n  makeReferenceSafe(testPath, scope);\n  const generatedValue = babelGenerator(testPath.node, { concise: true });\n  const conditionArray = [\n    generateScriptlet(`if (${generatedValue.code}) {`),\n    consequent,\n    alternate ? generateScriptlet('} else {') : null,\n    alternate,\n    generateScriptlet('}')\n  ].filter(Boolean);\n  return conditionArray.join('');\n}\n\nfunction generateIteration({ iterablePath, params, body, scope }) {\n  makeReferenceSafe(iterablePath, scope);\n  const iterableCode = babelGenerator(iterablePath.node, { concise: true }).code;\n  const paramsCode = params.join(', ');\n  const iterationArray = [\n    generateScriptlet(`${iterableCode}.forEach((${paramsCode}) => {`),\n    body,\n    generateScriptlet('})')\n  ].filter(Boolean);\n  return iterationArray.join('');\n}\n\nfunction getIterationParams(currentValuePath, indexPath, arrayPath) {\n  const currentValueCode = currentValuePath\n    ? babelGenerator(currentValuePath.node, { concise: true }).code\n    : null;\n  const indexCode = indexPath ? babelGenerator(indexPath.node, { concise: true }).code : null;\n  const arrayCode = arrayPath ? babelGenerator(arrayPath.node, { concise: true }).code : null;\n  const params = [currentValueCode, indexCode, arrayCode].filter(Boolean);\n  return params;\n}\n\nfunction generateScriptlet(value) {\n  return `<% ${value} %>`;\n}\n\nfunction generateInterpolationEscaped(valuePath, scope) {\n  makeReferenceSafe(valuePath, scope);\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  return `<%= ${generatedValue.code} %>`;\n}\n\nfunction makeReferenceSafe(path, scope) {\n  if (t.isIdentifier(path)) {\n    referenceSafeReplacement(scope, path);\n    return;\n  }\n\n  if (t.isMemberExpression(path)) {\n    const pathFirst = getFirstMemberExpression(path);\n    if (pathFirst.node.name === 'locals') {\n      return;\n    }\n    referenceSafeReplacement(scope, pathFirst);\n  }\n\n  path.traverse({\n    Identifier(path1) {\n      if (t.isMemberExpression(path1.parent) || t.isObjectProperty(path1.parent)) {\n        return;\n      }\n      referenceSafeReplacement(scope, path1);\n    },\n    MemberExpression(path1) {\n      if (t.isMemberExpression(path1.parent)) {\n        return;\n      }\n      const pathFirst = getFirstMemberExpression(path1);\n      if (pathFirst.node.name === 'locals') {\n        return;\n      }\n      referenceSafeReplacement(scope, pathFirst);\n    }\n  });\n}\n\nfunction referenceSafeReplacement(scope, path) {\n  const isFromScope = !!scope.find(scopeVar => scopeVar === path.node.name);\n  if (isFromScope) {\n    return;\n  }\n  path.replaceWith(t.memberExpression(t.identifier('locals'), path.node));\n}\n\nfunction indent(str, { initialIndentLevel, indentLevel }) {\n  const indentChar = ' ';\n  const indentLength = 2;\n  const startIndentNumber = indentLevel * indentLength;\n  const endIndentNumber = (indentLevel ? indentLevel - 1 : indentLevel) * indentLength;\n  const strIndented = `${indentLevel === initialIndentLevel ? '' : '\\n'}${indentChar.repeat(\n    startIndentNumber\n  )}${str}${'\\n'}${indentChar.repeat(endIndentNumber)}`;\n  return strIndented;\n}\n\nfunction resolvesToString(path) {\n  if (t.isTemplateLiteral(path.node)) {\n    return true;\n  }\n  if (\n    t.isConditionalExpression(path.node) &&\n    t.isStringLiteral(path.node.consequent) &&\n    t.isStringLiteral(path.node.alternate)\n  ) {\n    return true;\n  }\n  if (t.isBinaryExpression(path.node) && path.node.operator === '+') {\n    const nodeLeft = path.node.left;\n    const nodeRight = path.node.right;\n    if (\n      t.isTaggedTemplateExpression(nodeLeft) ||\n      t.isStringLiteral(nodeLeft) ||\n      t.isTemplateLiteral(nodeLeft) ||\n      t.isTaggedTemplateExpression(nodeRight) ||\n      t.isStringLiteral(nodeRight) ||\n      t.isTemplateLiteral(nodeRight)\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}