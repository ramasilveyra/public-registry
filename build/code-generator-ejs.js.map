{"version":3,"sources":["../src/code-generator-ejs.js"],"names":["codeGeneratorEjs","node","initialIndentLevel","indentLevel","type","rootName","children","map","child","join","mixinName","elementName","indent","generateTag","tagName","attributes","textName","value","attributeName","generateProperty","name","expression","interpolationEscapedName","generateInterpolationEscaped","conditionName","generateCondition","test","consequent","alternate","iterationName","generateIteration","iterable","currentValue","index","array","body","TypeError","properties","startTagBeginning","htmlTagsVoids","includes","startTag","endTag","tag","normalizedName","normalizePropertyName","startPropertyBeginning","result","isNullOrUndefined","propertyInterpolated","generateScriptlet","conditionArray","filter","Boolean","params","iterationArray","str","indentChar","indentLength","startIndentNumber","endIndentNumber","strIndented","repeat","code","evaluates","Program","path","get","bodyChild","evaluate","confident","undefined"],"mappings":"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","file":"code-generator-ejs.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport htmlTagsVoids from 'html-tags/void';\nimport babelTraverse from '@babel/traverse';\nimport parse from './parser';\nimport {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\n\nfunction codeGeneratorEjs(node, { initialIndentLevel = 0, indentLevel = initialIndentLevel } = {}) {\n  switch (node.type) {\n    case rootName:\n      return node.children\n        .map(child => codeGeneratorEjs(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case mixinName:\n      return node.children.map(child =>\n        codeGeneratorEjs(child, { initialIndentLevel, indentLevel })\n      );\n    case elementName:\n      return indent(\n        generateTag(\n          node.tagName,\n          node.children\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join(''),\n          node.attributes\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join('')\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case textName:\n      return node.value;\n    case attributeName:\n      return generateProperty(node.name, node.value, node.expression);\n    case interpolationEscapedName:\n      return generateInterpolationEscaped(node.value);\n    case conditionName:\n      return indent(\n        generateCondition(\n          node.test,\n          codeGeneratorEjs(node.consequent, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          node.alternate &&\n            codeGeneratorEjs(node.alternate, { initialIndentLevel, indentLevel: indentLevel + 1 })\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case iterationName:\n      return indent(\n        generateIteration({\n          iterable: node.iterable,\n          currentValue: node.currentValue,\n          index: node.index,\n          array: node.array,\n          body: codeGeneratorEjs(node.body, { initialIndentLevel, indentLevel: indentLevel + 1 })\n        }),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    default:\n      throw new TypeError(node.type);\n  }\n}\n\nexport default codeGeneratorEjs;\n\nfunction generateTag(tagName, children, properties) {\n  const startTagBeginning = `<${tagName}${properties}`;\n  if (htmlTagsVoids.includes(tagName)) {\n    return `${startTagBeginning} />`;\n  }\n  const startTag = `${startTagBeginning}>`;\n  const endTag = `</${tagName}>`;\n  const tag = startTag + children + endTag;\n\n  return tag;\n}\n\nfunction generateProperty(name, value, expression) {\n  const normalizedName = normalizePropertyName(name);\n  const startPropertyBeginning = ` ${normalizedName}`;\n\n  // NOTE: `value === true` is to accept boolean attributes, e.g.: `<input checked />`.\n  if (value === true) {\n    return startPropertyBeginning;\n  }\n\n  if (expression) {\n    const result = isNullOrUndefined(value);\n    const propertyInterpolated = `${startPropertyBeginning}=\"${generateInterpolationEscaped(\n      value\n    )}\"`;\n    if (result) {\n      return `${generateScriptlet(\n        `if (![null,undefined].includes(${value})) {`\n      )}${propertyInterpolated}${generateScriptlet('}')}`;\n    }\n    return propertyInterpolated;\n  }\n\n  return `${startPropertyBeginning}=\"${value}\"`;\n}\n\nfunction normalizePropertyName(name) {\n  switch (name) {\n    case 'className':\n      return 'class';\n    case 'htmlFor':\n      return 'for';\n    case 'tabIndex':\n      return 'tabindex';\n    default:\n      return name;\n  }\n}\n\nfunction generateCondition(test, consequent, alternate) {\n  const conditionArray = [\n    generateScriptlet(`if (${test}) {`),\n    consequent,\n    alternate ? generateScriptlet('} else {') : null,\n    alternate,\n    generateScriptlet('}')\n  ].filter(Boolean);\n  return conditionArray.join('');\n}\n\nfunction generateIteration({ iterable, currentValue, index, array, body }) {\n  const params = [currentValue, index, array].filter(Boolean).join(', ');\n  const iterationArray = [\n    generateScriptlet(`${iterable}.forEach((${params}) => {`),\n    body,\n    generateScriptlet('})')\n  ].filter(Boolean);\n  return iterationArray.join('');\n}\n\nfunction generateScriptlet(value) {\n  return `<% ${value} %>`;\n}\n\nfunction generateInterpolationEscaped(value) {\n  return `<%= ${value} %>`;\n}\n\nfunction indent(str, { initialIndentLevel, indentLevel }) {\n  const indentChar = ' ';\n  const indentLength = 2;\n  const startIndentNumber = indentLevel * indentLength;\n  const endIndentNumber = (indentLevel ? indentLevel - 1 : indentLevel) * indentLength;\n  const strIndented = `${indentLevel === initialIndentLevel ? '' : '\\n'}${indentChar.repeat(\n    startIndentNumber\n  )}${str}${'\\n'}${indentChar.repeat(endIndentNumber)}`;\n  return strIndented;\n}\n\nfunction isNullOrUndefined(code) {\n  let evaluates = null;\n  babelTraverse(\n    parse(`(${code})`),\n    {\n      Program(path) {\n        const body = path.get('body');\n        if (!body) {\n          return;\n        }\n        const bodyChild = body[0];\n        if (!bodyChild) {\n          return;\n        }\n        evaluates = bodyChild.evaluate();\n      }\n    },\n    null\n  );\n  if (evaluates.confident) {\n    const result = [null, undefined].includes(evaluates.value);\n    return result;\n  }\n  return true;\n}\n"]}