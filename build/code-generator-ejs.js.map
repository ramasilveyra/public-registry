{"version":3,"sources":["../src/code-generator-ejs.js"],"names":["t","codeGeneratorEjs","node","initialIndentLevel","indentLevel","type","rootName","children","map","child","join","mixinName","elementName","indent","generateTag","tagName","attributes","textName","value","attributeName","generateProperty","name","expression","interpolationEscapedName","generateInterpolationEscaped","conditionName","generateCondition","test","consequent","alternate","iterationName","generateIteration","iterable","currentValue","index","array","body","TypeError","properties","startTagBeginning","htmlTagsVoids","includes","startTag","endTag","tag","normalizedName","startPropertyBeginning","resultNullOrUndefined","isNullOrUndefined","resultString","isString","propertyInterpolated","generateScriptlet","conditionArray","filter","Boolean","params","iterationArray","str","indentChar","indentLength","startIndentNumber","endIndentNumber","strIndented","repeat","code","bodyChild","evaluates","evaluate","confident","result","undefined","ast","is","Program","path","get","isTemplateLiteral","ConditionalExpression","isStringLiteral","BinaryExpression","operator","nodeLeft","left","nodeRight","right","isTaggedTemplateExpression"],"mappings":"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","file":"code-generator-ejs.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport htmlTagsVoids from 'html-tags/void';\nimport * as t from '@babel/types';\nimport babelTraverse from '@babel/traverse';\nimport parse from './parser';\nimport {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\nimport normalizePropertyName from './utils/normalize-property-name';\nimport getBodyChild from './utils/get-body-child';\n\nfunction codeGeneratorEjs(node, { initialIndentLevel = 0, indentLevel = initialIndentLevel } = {}) {\n  switch (node.type) {\n    case rootName:\n      return node.children\n        .map(child => codeGeneratorEjs(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case mixinName:\n      return node.children\n        .map(child => codeGeneratorEjs(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case elementName:\n      return indent(\n        generateTag(\n          node.tagName,\n          node.children\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join(''),\n          node.attributes\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join('')\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case textName:\n      return node.value;\n    case attributeName:\n      return generateProperty(node.name, node.value, node.expression);\n    case interpolationEscapedName:\n      return generateInterpolationEscaped(node.value);\n    case conditionName:\n      return indent(\n        generateCondition(\n          node.test,\n          codeGeneratorEjs(node.consequent, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          node.alternate &&\n            codeGeneratorEjs(node.alternate, { initialIndentLevel, indentLevel: indentLevel + 1 })\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case iterationName:\n      return indent(\n        generateIteration({\n          iterable: node.iterable,\n          currentValue: node.currentValue,\n          index: node.index,\n          array: node.array,\n          body: codeGeneratorEjs(node.body, { initialIndentLevel, indentLevel: indentLevel + 1 })\n        }),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    default:\n      throw new TypeError(node.type);\n  }\n}\n\nexport default codeGeneratorEjs;\n\nfunction generateTag(tagName, children, properties) {\n  const startTagBeginning = `<${tagName}${properties}`;\n  if (htmlTagsVoids.includes(tagName)) {\n    return `${startTagBeginning} />`;\n  }\n  const startTag = `${startTagBeginning}>`;\n  const endTag = `</${tagName}>`;\n  const tag = startTag + children + endTag;\n\n  return tag;\n}\n\nfunction generateProperty(name, value, expression) {\n  const normalizedName = normalizePropertyName(name);\n  const startPropertyBeginning = ` ${normalizedName}`;\n\n  // NOTE: `value === true` is to accept boolean attributes, e.g.: `<input checked />`.\n  if (value === true) {\n    return startPropertyBeginning;\n  }\n\n  if (expression) {\n    // TODO: property nodes that are expressions should have the babel ast so `isNullOrUndefined()` or `isString()` doesn't need to parse again.\n    const resultNullOrUndefined = isNullOrUndefined(value);\n    const resultString = isString(value);\n    const propertyInterpolated = `${startPropertyBeginning}=\"${generateInterpolationEscaped(\n      value\n    )}\"`;\n    if (!resultString && resultNullOrUndefined) {\n      return `${generateScriptlet(\n        `if (![null,undefined].includes(${value})) {`\n      )}${propertyInterpolated}${generateScriptlet('}')}`;\n    }\n    return propertyInterpolated;\n  }\n\n  return `${startPropertyBeginning}=\"${value}\"`;\n}\n\nfunction generateCondition(test, consequent, alternate) {\n  const conditionArray = [\n    generateScriptlet(`if (${test}) {`),\n    consequent,\n    alternate ? generateScriptlet('} else {') : null,\n    alternate,\n    generateScriptlet('}')\n  ].filter(Boolean);\n  return conditionArray.join('');\n}\n\nfunction generateIteration({ iterable, currentValue, index, array, body }) {\n  const params = [currentValue, index, array].filter(Boolean).join(', ');\n  const iterationArray = [\n    generateScriptlet(`${iterable}.forEach((${params}) => {`),\n    body,\n    generateScriptlet('})')\n  ].filter(Boolean);\n  return iterationArray.join('');\n}\n\nfunction generateScriptlet(value) {\n  return `<% ${value} %>`;\n}\n\nfunction generateInterpolationEscaped(value) {\n  return `<%= ${value} %>`;\n}\n\nfunction indent(str, { initialIndentLevel, indentLevel }) {\n  const indentChar = ' ';\n  const indentLength = 2;\n  const startIndentNumber = indentLevel * indentLength;\n  const endIndentNumber = (indentLevel ? indentLevel - 1 : indentLevel) * indentLength;\n  const strIndented = `${indentLevel === initialIndentLevel ? '' : '\\n'}${indentChar.repeat(\n    startIndentNumber\n  )}${str}${'\\n'}${indentChar.repeat(endIndentNumber)}`;\n  return strIndented;\n}\n\nfunction isNullOrUndefined(code) {\n  const bodyChild = getBodyChild(code);\n  if (!bodyChild) {\n    return true;\n  }\n  const evaluates = bodyChild.evaluate();\n  if (evaluates.confident) {\n    const result = [null, undefined].includes(evaluates.value);\n    return result;\n  }\n  return true;\n}\n\nfunction isString(code) {\n  const ast = parse(`(${code})`);\n  let is = false;\n  babelTraverse(\n    ast,\n    {\n      Program(path) {\n        const body = path.get('body');\n        if (!body) {\n          return;\n        }\n        const bodyChild = body[0];\n        if (t.isTemplateLiteral(bodyChild.node.expression)) {\n          is = true;\n        }\n      },\n      ConditionalExpression(path) {\n        if (t.isStringLiteral(path.node.consequent) && t.isStringLiteral(path.node.alternate)) {\n          is = true;\n        }\n      },\n      BinaryExpression(path) {\n        if (path.node.operator !== '+') {\n          return;\n        }\n        const nodeLeft = path.node.left;\n        const nodeRight = path.node.right;\n        if (\n          t.isTaggedTemplateExpression(nodeLeft) ||\n          t.isStringLiteral(nodeLeft) ||\n          t.isTemplateLiteral(nodeLeft) ||\n          t.isTaggedTemplateExpression(nodeRight) ||\n          t.isStringLiteral(nodeRight) ||\n          t.isTemplateLiteral(nodeRight)\n        ) {\n          is = true;\n        }\n      }\n    },\n    null\n  );\n  return is;\n}\n"]}