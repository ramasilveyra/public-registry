{"version":3,"sources":["../src/code-generator-ejs.js"],"names":["t","codeGeneratorEjs","node","initialIndentLevel","indentLevel","type","rootName","children","map","child","join","mixinName","elementName","indent","generateTag","tagName","attributes","textName","value","attributeName","generateProperty","name","isBoolean","isString","valuePath","interpolationEscapedName","generateInterpolationEscaped","conditionName","generateCondition","testPath","consequent","alternate","iterationName","generateIteration","iterablePath","currentValuePath","indexPath","arrayPath","body","TypeError","properties","startTagBeginning","htmlTagsVoids","includes","startTag","endTag","tag","normalizedName","startPropertyBeginning","generatedValue","concise","resultString","resolvesToString","propertyInterpolated","generateScriptlet","code","conditionArray","filter","Boolean","iterableCode","currentValueCode","indexCode","arrayCode","params","iterationArray","str","indentChar","indentLength","startIndentNumber","endIndentNumber","strIndented","repeat","path","isTemplateLiteral","isConditionalExpression","isStringLiteral","isBinaryExpression","operator","nodeLeft","left","nodeRight","right","isTaggedTemplateExpression"],"mappings":"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","file":"code-generator-ejs.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport htmlTagsVoids from 'html-tags/void';\nimport * as t from '@babel/types';\nimport babelGenerator from '@babel/generator';\nimport {\n  attributeName,\n  conditionName,\n  elementName,\n  interpolationEscapedName,\n  iterationName,\n  mixinName,\n  rootName,\n  textName\n} from './ast';\nimport normalizePropertyName from './utils/normalize-property-name';\n\nfunction codeGeneratorEjs(node, { initialIndentLevel = 0, indentLevel = initialIndentLevel } = {}) {\n  switch (node.type) {\n    case rootName:\n      return node.children\n        .map(child => codeGeneratorEjs(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case mixinName:\n      return node.children\n        .map(child => codeGeneratorEjs(child, { initialIndentLevel, indentLevel }))\n        .join('');\n    case elementName:\n      return indent(\n        generateTag(\n          node.tagName,\n          node.children\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join(''),\n          node.attributes\n            .map(child =>\n              codeGeneratorEjs(child, { initialIndentLevel, indentLevel: indentLevel + 1 })\n            )\n            .join('')\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case textName:\n      return node.value;\n    case attributeName:\n      return generateProperty({\n        name: node.name,\n        isBoolean: node.isBoolean,\n        isString: node.isString,\n        value: node.value,\n        valuePath: node.valuePath\n      });\n    case interpolationEscapedName:\n      return generateInterpolationEscaped(node.valuePath);\n    case conditionName:\n      return indent(\n        generateCondition(\n          node.testPath,\n          codeGeneratorEjs(node.consequent, { initialIndentLevel, indentLevel: indentLevel + 1 }),\n          node.alternate &&\n            codeGeneratorEjs(node.alternate, { initialIndentLevel, indentLevel: indentLevel + 1 })\n        ),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    case iterationName:\n      return indent(\n        generateIteration({\n          iterablePath: node.iterablePath,\n          currentValuePath: node.currentValuePath,\n          indexPath: node.indexPath,\n          arrayPath: node.arrayPath,\n          body: codeGeneratorEjs(node.body, { initialIndentLevel, indentLevel: indentLevel + 1 })\n        }),\n        {\n          initialIndentLevel,\n          indentLevel\n        }\n      );\n    default:\n      throw new TypeError(node.type);\n  }\n}\n\nexport default codeGeneratorEjs;\n\nfunction generateTag(tagName, children, properties) {\n  const startTagBeginning = `<${tagName}${properties}`;\n  if (htmlTagsVoids.includes(tagName)) {\n    return `${startTagBeginning} />`;\n  }\n  const startTag = `${startTagBeginning}>`;\n  const endTag = `</${tagName}>`;\n  const tag = startTag + children + endTag;\n\n  return tag;\n}\n\nfunction generateProperty({ name, isBoolean, isString, value, valuePath }) {\n  const normalizedName = normalizePropertyName(name);\n  const startPropertyBeginning = ` ${normalizedName}`;\n\n  if (isBoolean) {\n    return startPropertyBeginning;\n  }\n\n  if (isString) {\n    return `${startPropertyBeginning}=\"${value}\"`;\n  }\n\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  const resultString = resolvesToString(valuePath);\n  const propertyInterpolated = `${startPropertyBeginning}=\"${generateInterpolationEscaped(\n    valuePath\n  )}\"`;\n  if (!resultString) {\n    return `${generateScriptlet(\n      `if (![null,undefined].includes(${generatedValue.code})) {`\n    )}${propertyInterpolated}${generateScriptlet('}')}`;\n  }\n  return propertyInterpolated;\n}\n\nfunction generateCondition(testPath, consequent, alternate) {\n  const generatedValue = babelGenerator(testPath.node, { concise: true });\n  const conditionArray = [\n    generateScriptlet(`if (${generatedValue.code}) {`),\n    consequent,\n    alternate ? generateScriptlet('} else {') : null,\n    alternate,\n    generateScriptlet('}')\n  ].filter(Boolean);\n  return conditionArray.join('');\n}\n\nfunction generateIteration({ iterablePath, currentValuePath, indexPath, arrayPath, body }) {\n  const iterableCode = babelGenerator(iterablePath.node, { concise: true }).code;\n  const currentValueCode = currentValuePath\n    ? babelGenerator(currentValuePath.node, { concise: true }).code\n    : null;\n  const indexCode = indexPath ? babelGenerator(indexPath.node, { concise: true }).code : null;\n  const arrayCode = arrayPath ? babelGenerator(arrayPath.node, { concise: true }).code : null;\n  const params = [currentValueCode, indexCode, arrayCode].filter(Boolean).join(', ');\n  const iterationArray = [\n    generateScriptlet(`${iterableCode}.forEach((${params}) => {`),\n    body,\n    generateScriptlet('})')\n  ].filter(Boolean);\n  return iterationArray.join('');\n}\n\nfunction generateScriptlet(value) {\n  return `<% ${value} %>`;\n}\n\nfunction generateInterpolationEscaped(valuePath) {\n  const generatedValue = babelGenerator(valuePath.node, { concise: true });\n  return `<%= ${generatedValue.code} %>`;\n}\n\nfunction indent(str, { initialIndentLevel, indentLevel }) {\n  const indentChar = ' ';\n  const indentLength = 2;\n  const startIndentNumber = indentLevel * indentLength;\n  const endIndentNumber = (indentLevel ? indentLevel - 1 : indentLevel) * indentLength;\n  const strIndented = `${indentLevel === initialIndentLevel ? '' : '\\n'}${indentChar.repeat(\n    startIndentNumber\n  )}${str}${'\\n'}${indentChar.repeat(endIndentNumber)}`;\n  return strIndented;\n}\n\nfunction resolvesToString(path) {\n  if (t.isTemplateLiteral(path.node)) {\n    return true;\n  }\n  if (\n    t.isConditionalExpression(path.node) &&\n    t.isStringLiteral(path.node.consequent) &&\n    t.isStringLiteral(path.node.alternate)\n  ) {\n    return true;\n  }\n  if (t.isBinaryExpression(path.node) && path.node.operator === '+') {\n    const nodeLeft = path.node.left;\n    const nodeRight = path.node.right;\n    if (\n      t.isTaggedTemplateExpression(nodeLeft) ||\n      t.isStringLiteral(nodeLeft) ||\n      t.isTemplateLiteral(nodeLeft) ||\n      t.isTaggedTemplateExpression(nodeRight) ||\n      t.isStringLiteral(nodeRight) ||\n      t.isTemplateLiteral(nodeRight)\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}