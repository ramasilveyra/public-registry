{"version":3,"sources":["../src/transformation.js"],"names":["t","transformation","oldAst","inputFilePath","newAst","table","components","dependencies","reactComponentVisitor","IfStatement","path","context","getContext","isFnWithoutQuickReturn","isBlockStatement","parent","isArrowFunctionExpression","parentPath","condition","testPath","get","setContext","JSXElement","tagName","node","openingElement","name","isFromDependency","isUsedAsRC","element","JSXText","elems","value","text","JSXExpressionContainer","isJSXAttribute","expressionPath","expressionNode","isLogicalExpression","operator","isConditionalExpression","isMapIterator","isStringLiteral","interpolationEscaped","JSXAttribute","valueNode","shouldIgnoreAttr","valuePath","attribute","isBoolean","isString","expression","isJSXElement","isNode","styles","properties","forEach","prop","key","stringInlineStyles","CallExpression","isIterator","iterablePath","currentValuePath","indexPath","arrayPath","iteration","LogicalExpression","isIfStatement","test","findParent","left","consequent","ConditionalExpression","ignoreConsequent","isNullLiteral","replaceWith","UnaryExpression","StringLiteral","generalVisitor","ImportDeclaration","source","specifier","specifiers","find","isImportDefaultSpecifier","local","requiredFrom","VariableDeclaration","checkForReactComponent","FunctionDeclaration","ExportDefaultDeclaration","exportedComponent","declaration","component","defaultExport","ObjectExpression","isAssignmentExpression","isMemberExpression","isObjectExpression","right","isIdentifier","object","property","isPropTypes","isDefaultProps","componentName","definitions","map","index","createDefinition","definition","mainComponent","Object","values","ast","is","isFunctionDeclaration","isExportDefaultDeclaration","props","mixin","createdFrom","traverse","_context","pathItem","callee","includes","newDef","assign","isRequired","defaultPath"],"mappings":"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","file":"transformation.js","sourcesContent":["/* eslint-disable no-underscore-dangle, no-param-reassign */\nimport babelTraverse from '@babel/traverse';\nimport * as t from '@babel/types';\nimport cleanJSXElementLiteralChild from '@babel/types/lib/utils/react/cleanJSXElementLiteralChild';\nimport {\n  createAttribute,\n  createCondition,\n  createElement,\n  createInterpolationEscaped,\n  createInterpolationUnescaped,\n  createIteration,\n  createMixin,\n  createRoot,\n  createText\n} from './ast';\nimport isFunctionalReactComponent from './utils/is-functional-react-component';\nimport getReactComponentName from './utils/get-react-component-name';\nimport addToContext from './utils/add-to-context';\nimport getReactComponentProps from './utils/get-react-component-props';\nimport inlineStyles from './utils/inline-styles';\n\nfunction transformation(oldAst, inputFilePath) {\n  const newAst = createRoot();\n  const table = { components: {}, dependencies: {} };\n\n  const reactComponentVisitor = {\n    IfStatement(path) {\n      const context = getContext(path);\n      const isFnWithoutQuickReturn =\n        t.isBlockStatement(path.parent) && t.isArrowFunctionExpression(path.parentPath.parent);\n      if (isFnWithoutQuickReturn) {\n        const condition = createCondition({ testPath: path.get('test') });\n        addToContext(context, condition);\n        setContext(path.parentPath, condition);\n      }\n    },\n    JSXElement(path) {\n      const tagName = path.node.openingElement.name.name;\n      if (!tagName) {\n        return;\n      }\n      const isFromDependency = table.dependencies[tagName];\n      if (isFromDependency) {\n        isFromDependency.isUsedAsRC = true;\n      }\n      const element = createElement(tagName);\n      const context = getContext(path);\n      addToContext(context, element);\n      setContext(path, element);\n    },\n    JSXText(path) {\n      const elems = [];\n      cleanJSXElementLiteralChild(path.node, elems);\n      const value = elems[0] ? elems[0].value : '';\n      if (!value) {\n        return;\n      }\n      const text = createText(value);\n      const context = getContext(path);\n      addToContext(context, text);\n    },\n    JSXExpressionContainer(path) {\n      // Let JSXAttribute visitor handle JSXExpressionContainer of attributes.\n      if (t.isJSXAttribute(path.parent)) {\n        return;\n      }\n\n      const expressionPath = path.get('expression');\n      const expressionNode = expressionPath.node;\n\n      if (t.isLogicalExpression(expressionNode, { operator: '&&' })) {\n        return;\n      }\n      if (t.isLogicalExpression(expressionNode, { operator: '||' })) {\n        return;\n      }\n      if (t.isConditionalExpression(expressionNode)) {\n        return;\n      }\n      if (isMapIterator(expressionNode)) {\n        return;\n      }\n      const context = getContext(path);\n      if (t.isStringLiteral(expressionNode)) {\n        const text = createText(expressionPath.node.value);\n        addToContext(context, text);\n        return;\n      }\n      const interpolationEscaped = createInterpolationEscaped(expressionPath);\n      addToContext(context, interpolationEscaped);\n    },\n    JSXAttribute(path) {\n      const context = getContext(path);\n      const name = path.node.name.name;\n      const valueNode = path.node.value;\n      if (shouldIgnoreAttr(name)) {\n        return;\n      }\n      if (name === 'dangerouslySetInnerHTML') {\n        const valuePath = path.get('value.expression.properties.0.value');\n        const attribute = createInterpolationUnescaped(valuePath);\n        addToContext(context, attribute);\n        return;\n      }\n      if (!valueNode) {\n        const attribute = createAttribute({ name, value: true, isBoolean: true });\n        addToContext(context, attribute, 'attributes');\n        return;\n      }\n      if (t.isStringLiteral(valueNode)) {\n        const attribute = createAttribute({ name, value: valueNode.value, isString: true });\n        addToContext(context, attribute, 'attributes');\n        return;\n      }\n      const expression = path.get('value.expression');\n      if (t.isJSXElement(expression)) {\n        const attribute = createAttribute({ name, isNode: true });\n        addToContext(context, attribute, 'attributes');\n        setContext(path, attribute);\n        return;\n      }\n      if (name === 'style') {\n        const styles = {};\n        expression.node.properties.forEach(prop => {\n          styles[prop.key.name] = prop.value.value;\n        });\n        const stringInlineStyles = inlineStyles(styles);\n        if (stringInlineStyles) {\n          const attribute = createAttribute({ name, value: stringInlineStyles, isString: true });\n          addToContext(context, attribute, 'attributes');\n        }\n        return;\n      }\n      const attribute = createAttribute({ name, valuePath: expression });\n      addToContext(context, attribute, 'attributes');\n    },\n    CallExpression(path) {\n      const isIterator = isMapIterator(path.node);\n      if (isIterator) {\n        const iterablePath = path.get('callee.object');\n        const currentValuePath = path.get('arguments.0.params.0');\n        const indexPath = path.get('arguments.0.params.1');\n        const arrayPath = path.get('arguments.0.params.2');\n        const iteration = createIteration({ iterablePath, currentValuePath, indexPath, arrayPath });\n        const context = getContext(path);\n        addToContext(context, iteration);\n        setContext(path, iteration);\n      }\n    },\n    LogicalExpression(path) {\n      if (t.isIfStatement(path.parent)) {\n        return;\n      }\n      if (t.isConditionalExpression(path.parent) && path.parent.test === path.node) {\n        return;\n      }\n      if (path.findParent(node => t.isJSXAttribute(node)) || t.isLogicalExpression(path.parent)) {\n        return;\n      }\n      const left = path.get('left');\n      const context = getContext(path);\n      if (path.node.operator === '&&') {\n        const condition = createCondition({ testPath: left });\n        addToContext(context, condition);\n        setContext(path, condition);\n        return;\n      }\n      const interpolationEscaped = createInterpolationEscaped(left);\n      const condition = createCondition({ testPath: left, consequent: interpolationEscaped });\n      addToContext(context, condition);\n      setContext(path, condition);\n    },\n    ConditionalExpression(path) {\n      if (path.findParent(node => t.isJSXAttribute(node))) {\n        return;\n      }\n      const testPath = path.get('test');\n      const context = getContext(path);\n      const ignoreConsequent = t.isNullLiteral(path.node.consequent);\n      if (ignoreConsequent) {\n        testPath.replaceWith(t.UnaryExpression('!', testPath.node));\n      }\n      const condition = createCondition({ testPath });\n      addToContext(context, condition);\n      setContext(path, condition);\n    },\n    StringLiteral(path) {\n      if (path.findParent(node => t.isJSXAttribute(node))) {\n        return;\n      }\n      if (t.isConditionalExpression(path.parent)) {\n        const context = getContext(path);\n        const text = createText(path.node.value);\n        addToContext(context, text);\n      }\n    }\n  };\n\n  const generalVisitor = {\n    ImportDeclaration(path) {\n      const source = path.node.source.value;\n      const specifier = path.node.specifiers.find(node => t.isImportDefaultSpecifier(node)).local\n        .name;\n      table.dependencies[specifier] = { source, requiredFrom: inputFilePath };\n    },\n    VariableDeclaration(path) {\n      checkForReactComponent(path);\n    },\n    FunctionDeclaration(path) {\n      checkForReactComponent(path);\n    },\n    ExportDefaultDeclaration(path) {\n      const exportedComponent = path.node.declaration.name;\n      const component = table.components[exportedComponent];\n      if (component) {\n        component.defaultExport = true;\n      }\n    },\n    ObjectExpression(path) {\n      const parent = path.parent;\n      if (\n        !t.isAssignmentExpression(parent, { operator: '=' }) ||\n        !t.isMemberExpression(parent.left) ||\n        !t.isObjectExpression(parent.right) ||\n        !t.isIdentifier(parent.left.object) ||\n        !(\n          t.isIdentifier(parent.left.property, { name: 'propTypes' }) ||\n          t.isIdentifier(parent.left.property, { name: 'defaultProps' })\n        )\n      ) {\n        return;\n      }\n      const isPropTypes = t.isIdentifier(parent.left.property, { name: 'propTypes' });\n      const isDefaultProps = t.isIdentifier(parent.left.property, { name: 'defaultProps' });\n      const componentName = parent.left.object.name;\n      const component = table.components[componentName];\n      if (!component.definitions) {\n        component.definitions = path.node.properties.map((node, index) =>\n          createDefinition({ node, index, isPropTypes, isDefaultProps, path })\n        );\n      }\n      path.node.properties.forEach((node, index) => {\n        component.definitions = component.definitions.map(definition => {\n          if (definition.name === node.key.name) {\n            return createDefinition({ definition, node, index, isPropTypes, isDefaultProps, path });\n          }\n          return definition;\n        });\n      });\n    }\n  };\n\n  babelTraverse(oldAst, generalVisitor, null);\n\n  const mainComponent = Object.values(table.components).find(component => component.defaultExport);\n  addToContext(newAst, mainComponent.node);\n\n  return { ast: newAst, table };\n\n  function checkForReactComponent(path) {\n    const is = isFunctionalReactComponent(path);\n    const name = getReactComponentName(path.node);\n    const defaultExport = t.isFunctionDeclaration(path.node)\n      ? t.isExportDefaultDeclaration(path.parent)\n      : false;\n    const props = getReactComponentProps(path.node);\n    if (is) {\n      const mixin = createMixin(name, props);\n      setContext(path, mixin);\n      table.components[name] = {\n        node: mixin,\n        defaultExport,\n        createdFrom: inputFilePath\n      };\n      path.traverse(reactComponentVisitor);\n    }\n  }\n}\n\nexport default transformation;\n\nfunction setContext(path, context) {\n  path.node._context = context;\n}\n\nfunction getContext(path) {\n  const context = path.findParent(pathItem => !!pathItem.node._context).node._context;\n  return context;\n}\n\nfunction isMapIterator(node) {\n  const callee = node.callee;\n  if (!callee || !callee.property) {\n    return false;\n  }\n  const is = callee.property.name === 'map';\n  return is;\n}\n\nfunction shouldIgnoreAttr(name) {\n  if (['key', 'onClick', 'ref'].includes(name)) {\n    return true;\n  }\n  return false;\n}\n\nfunction createDefinition({ definition, node, index, isPropTypes, isDefaultProps, path }) {\n  const newDef = Object.assign({}, definition);\n  if (!newDef.name) {\n    newDef.name = node.key.name;\n  }\n  if (isPropTypes) {\n    newDef.isRequired =\n      t.isMemberExpression(node.value) &&\n      t.isIdentifier(node.value.property, { name: 'isRequired' });\n  }\n  if (isDefaultProps) {\n    newDef.defaultPath = path.get(`properties.${index}.value`);\n  }\n  return newDef;\n}\n"]}