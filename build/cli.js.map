{"version":3,"sources":["../src/cli.js"],"names":["unreactCLI","argv","console","log","chalk","bold","white","pkg","name","version","parsedArgv","option","alias","describe","type","default","choices","usage","description","help","fileOrDir","_","spinner","text","progress","report","stopAndPersist","gray","templateEngine","t","beginning","ending","initialIndentLevel","o","start","then","succeed","green","catch","err","fail","red","stack","process","exit","O","message"],"mappings":"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","file":"cli.js","sourcesContent":["/* eslint-disable no-console */\nimport yargs from 'yargs';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { compileFile, compileDir } from './index';\nimport pkg from '../package.json';\n\nexport default function unreactCLI(argv) {\n  console.log(chalk.bold.white(`${pkg.name} v${pkg.version}`));\n\n  const parsedArgv = yargs(argv)\n    .option('o', {\n      alias: 'out-file',\n      describe: 'Output file',\n      type: 'string'\n    })\n    .option('O', {\n      alias: 'out-dir',\n      describe: 'Output dir',\n      type: 'string'\n    })\n    .option('t', {\n      alias: 'template-engine',\n      describe: 'Output template engine',\n      type: 'string',\n      default: 'pug',\n      choices: ['pug', 'ejs']\n    })\n    .option('add-beginning', {\n      describe: 'Add string to the beginning of the output file',\n      type: 'string'\n    })\n    .option('add-ending', {\n      describe: 'Add string to the ending of the output file',\n      type: 'string'\n    })\n    .option('initial-indent-level', {\n      describe: 'Start at <number> indent level',\n      type: 'number',\n      default: 0\n    })\n    .usage(`${pkg.description}.\\nUsage: $0 <file or dir> [options]`)\n    .version()\n    .alias('version', 'v')\n    .help()\n    .alias('help', 'h').argv;\n  const fileOrDir = parsedArgv._[0];\n  const spinner = ora({ text: 'Processing...' });\n  const progress = report => {\n    spinner.stopAndPersist({ text: `${chalk.gray(report)}` });\n  };\n  const templateEngine = parsedArgv.t;\n  const beginning = parsedArgv['add-beginning'];\n  const ending = parsedArgv['add-ending'];\n  const initialIndentLevel = parsedArgv['initial-indent-level'];\n\n  if (fileOrDir && parsedArgv.o) {\n    spinner.start();\n    return compileFile(fileOrDir, parsedArgv.o, {\n      templateEngine,\n      beginning,\n      ending,\n      initialIndentLevel,\n      progress\n    })\n      .then(() => {\n        spinner.succeed(`${chalk.bold.green('success')} file transformed to ${templateEngine}`);\n      })\n      .catch(err => {\n        spinner.stopAndPersist();\n        spinner.fail(`${chalk.bold.red('error')} ${err.stack}`);\n        process.exit(1);\n      });\n  }\n\n  if (fileOrDir && parsedArgv.O) {\n    spinner.start();\n    return compileDir(fileOrDir, parsedArgv.O, {\n      templateEngine,\n      beginning,\n      ending,\n      initialIndentLevel,\n      progress\n    })\n      .then(() => {\n        spinner.succeed(`${chalk.bold.green('success')} folder transformed to ${templateEngine}`);\n      })\n      .catch(err => {\n        spinner.stopAndPersist();\n        spinner.fail(`${chalk.bold.red('error')} ${err.message}`);\n        process.exit(1);\n      });\n  }\n\n  return null;\n}\n"]}