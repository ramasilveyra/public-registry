{"version":3,"sources":["../src/ast.js"],"names":["rootName","createRoot","type","children","elementName","createElement","tagName","attributes","textName","createText","value","attributeName","createAttribute","name","expression","identifiers","interpolationEscapedName","createInterpolationEscaped","conditionName","createCondition","test","consequent","alternate","iterationName","createIteration","iterable","currentValue","index","array","body","mixinName","createMixin","props"],"mappings":";;;;;AAAA;AACO,MAAMA,8BAAW,SAAjB;AACA,MAAMC,kCAAa,OAAO;AAC/BC,QAAMF,QADyB;AAE/BG,YAAU;AAFqB,CAAP,CAAnB;;AAKP;AACO,MAAMC,oCAAc,SAApB;AACA,MAAMC,wCAAgB,CAACC,OAAD,EAAUC,aAAa,EAAvB,MAA+B;AAC1DL,QAAME,WADoD;AAE1DE,SAF0D;AAG1DC,YAH0D;AAI1DJ,YAAU;AAJgD,CAA/B,CAAtB;;AAOP;AACO,MAAMK,8BAAW,MAAjB;AACA,MAAMC,kCAAaC,UAAU;AAClCR,QAAMM,QAD4B;AAElCE;AAFkC,CAAV,CAAnB;;AAKP;AACO,MAAMC,wCAAgB,WAAtB;AACA,MAAMC,4CAAkB,CAAC,EAAEC,IAAF,EAAQH,KAAR,EAAeI,aAAa,KAA5B,EAAmCC,WAAnC,EAAD,MAAuD;AACpFb,QAAMS,aAD8E;AAEpFE,MAFoF;AAGpFH,OAHoF;AAIpFI,YAJoF;AAKpFC;AALoF,CAAvD,CAAxB;;AAQP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO,MAAMC,8DAA2B,sBAAjC;AACA,MAAMC,kEAA6B,CAACP,KAAD,EAAQK,WAAR,MAAyB;AACjEb,QAAMc,wBAD2D;AAEjEN,OAFiE;AAGjEK;AAHiE,CAAzB,CAAnC;;AAMP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO,MAAMG,wCAAgB,WAAtB;AACA,MAAMC,4CAAkB,CAAC,EAAEC,IAAF,EAAQC,UAAR,EAAoBC,YAAY,IAAhC,EAAsCP,WAAtC,EAAD,MAA0D;AACvFb,QAAMgB,aADiF;AAEvFE,MAFuF;AAGvFC,YAHuF;AAIvFC,WAJuF;AAKvFP;AALuF,CAA1D,CAAxB;;AAQP;AACO,MAAMQ,wCAAgB,WAAtB;AACA,MAAMC,4CAAkB,CAAC,EAAEC,QAAF,EAAYC,YAAZ,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,OAAO,IAA/C,EAAD,MAA4D;AACzF3B,QAAMqB,aADmF;AAEzFE,UAFyF;AAGzFC,cAHyF;AAIzFC,OAJyF;AAKzFC,OALyF;AAMzFC;AANyF,CAA5D,CAAxB;;AASP;AACO,MAAMC,gCAAY,OAAlB;AACA,MAAMC,oCAAc,CAAClB,IAAD,EAAOmB,KAAP,MAAkB;AAC3C9B,QAAM4B,SADqC;AAE3CjB,MAF2C;AAG3CmB,OAH2C;AAI3C7B,YAAU;AAJiC,CAAlB,CAApB","file":"ast.js","sourcesContent":["// Root.\nexport const rootName = 'Program';\nexport const createRoot = () => ({\n  type: rootName,\n  children: []\n});\n\n// HTML elements.\nexport const elementName = 'Element';\nexport const createElement = (tagName, attributes = []) => ({\n  type: elementName,\n  tagName,\n  attributes,\n  children: []\n});\n\n// HTML text elements.\nexport const textName = 'Text';\nexport const createText = value => ({\n  type: textName,\n  value\n});\n\n// HTML attributes.\nexport const attributeName = 'Attribute';\nexport const createAttribute = ({ name, value, expression = false, identifiers }) => ({\n  type: attributeName,\n  name,\n  value,\n  expression,\n  identifiers\n});\n\n// Template engine syntax for inline JavaScript.\n// export const scriptletName = 'Scriptlet';\n// export const createScriptlet = value => ({\n//   type: scriptletName,\n//   value\n// });\n\n// Template engine syntax for escaped interpolation.\nexport const interpolationEscapedName = 'InterpolationEscaped';\nexport const createInterpolationEscaped = (value, identifiers) => ({\n  type: interpolationEscapedName,\n  value,\n  identifiers\n});\n\n// Template engine syntax for unescaped interpolation.\n// export const interpolationUnescapedName = 'InterpolationUnescaped';\n// export const createInterpolationUnescaped = value => ({\n//   type: interpolationUnescapedName,\n//   value\n// });\n\n// Template engine syntax for condition.\nexport const conditionName = 'Condition';\nexport const createCondition = ({ test, consequent, alternate = null, identifiers }) => ({\n  type: conditionName,\n  test,\n  consequent,\n  alternate,\n  identifiers\n});\n\n// Template engine syntax for iteration.\nexport const iterationName = 'Iteration';\nexport const createIteration = ({ iterable, currentValue, index, array, body = null }) => ({\n  type: iterationName,\n  iterable,\n  currentValue,\n  index,\n  array,\n  body\n});\n\n// Template engine syntax for mixin.\nexport const mixinName = 'Mixin';\nexport const createMixin = (name, props) => ({\n  type: mixinName,\n  name,\n  props,\n  children: []\n});\n"]}